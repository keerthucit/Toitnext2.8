/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.inventory;

import com.openbravo.basic.BasicException;
import com.openbravo.pos.customers.DataLogicCustomers;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Color;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author sysfore17
 */
public class JPanelKodMaster extends javax.swing.JPanel implements JPanelView,BeanFactoryApp{
  private AppView m_App;
  protected DataLogicCustomers dlCustomers;
  public DefaultListModel model = null;
  public java.util.List<KodInfo> list = null;
  private java.util.List<String> oldKodRolelist = null;
  private java.util.List<RoleInfo> oldKodlist=null;;
  private static volatile SecureRandom numberGenerator = null;
  private static final long MSB = 0x8000000000000000L;
  private static final JPanelKodMaster RandomUtil = null;
  private java.util.List<String> newKodRoleList;
//   private java.util.List<String> sequenceList;
  public boolean updateMode = false;
  public boolean roleUpdateMode = false;
    /**
     * Creates new form JPanelKodMaster
     */
    public JPanelKodMaster() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jKodList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextStatus = new javax.swing.JTextField();
        jTextColor = new javax.swing.JTextField();
        jTextSequence = new javax.swing.JTextField();
        jSaver = new javax.swing.JPanel();
        jbtnNew = new javax.swing.JButton();
        jbtnDelete = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jbtnSave = new javax.swing.JButton();
        jButtonColour = new javax.swing.JButton();
        jButtonRole = new javax.swing.JButton();
        jCheckLastStatus = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jKodList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KodValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jKodList);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 53, 136, 202));

        jLabel1.setText("Status Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 58, 185, -1));

        jLabel2.setText("Color Code");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 92, 185, 40));

        jLabel3.setText("Sequence");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 138, 185, 30));

        jLabel4.setText("Role");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 180, 170, 30));

        jTextStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextStatusActionPerformed(evt);
            }
        });
        add(jTextStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 138, -1));

        jTextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextColorActionPerformed(evt);
            }
        });
        add(jTextColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 99, 138, -1));

        jTextSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSequenceActionPerformed(evt);
            }
        });
        add(jTextSequence, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 138, -1));

        jbtnNew.setBackground(new java.awt.Color(255, 255, 255));
        jbtnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/editnew.png"))); // NOI18N
        jbtnNew.setFocusPainted(false);
        jbtnNew.setFocusable(false);
        jbtnNew.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jbtnNew.setRequestFocusEnabled(false);
        jbtnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNewActionPerformed(evt);
            }
        });

        jbtnDelete.setBackground(new java.awt.Color(255, 255, 255));
        jbtnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/editdelete.png"))); // NOI18N
        jbtnDelete.setFocusPainted(false);
        jbtnDelete.setFocusable(false);
        jbtnDelete.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });

        jbtnSave.setBackground(new java.awt.Color(255, 255, 255));
        jbtnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/filesave.png"))); // NOI18N
        jbtnSave.setFocusPainted(false);
        jbtnSave.setFocusable(false);
        jbtnSave.setMargin(new java.awt.Insets(2, 8, 2, 8));
        jbtnSave.setRequestFocusEnabled(false);
        jbtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jSaverLayout = new javax.swing.GroupLayout(jSaver);
        jSaver.setLayout(jSaverLayout);
        jSaverLayout.setHorizontalGroup(
            jSaverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSaverLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(330, 330, 330)
                .addComponent(jbtnNew)
                .addGap(4, 4, 4)
                .addComponent(jbtnDelete)
                .addGap(4, 4, 4)
                .addComponent(jbtnSave))
        );
        jSaverLayout.setVerticalGroup(
            jSaverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSaverLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jbtnNew)
            .addComponent(jbtnDelete)
            .addComponent(jbtnSave)
        );

        add(jSaver, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 12, -1, -1));

        jButtonColour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/color_line.png"))); // NOI18N
        jButtonColour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColourActionPerformed(evt);
            }
        });
        add(jButtonColour, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, 20, -1));

        jButtonRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/yast_group_add.png"))); // NOI18N
        jButtonRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRoleActionPerformed(evt);
            }
        });
        add(jButtonRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, 30, 30));

        jCheckLastStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckLastStatusActionPerformed(evt);
            }
        });
        add(jCheckLastStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, -1, -1));

        jLabel5.setText("Is Last Status");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jTextStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextStatusActionPerformed

    private void jTextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextColorActionPerformed

    private void jTextSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSequenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSequenceActionPerformed

    private void jbtnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNewActionPerformed
        jTextStatus.setText("");
        jTextColor.setText("");
        jTextSequence.setText("");
        jKodList.clearSelection();
        updateMode = false;
        jCheckLastStatus.setSelected(false);
      
    }//GEN-LAST:event_jbtnNewActionPerformed

    private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed

        int index = jKodList.getSelectedIndex();
         if (index == -1) {
            JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please select the status in list");
        } else {
            try {
                String val = list.get(index).getId();
                   dlCustomers.deleteKodLine(val);
                    model.remove(index);
                    list.remove(index);
                   jTextStatus.setText("");
                   jTextColor.setText("");
                   jTextSequence.setText("");
                   jCheckLastStatus.setSelected(false);
                  
                  
            } catch (BasicException ex) {
                Logger.getLogger(JPanelKodMaster.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
         updateMode = false;
        
    }//GEN-LAST:event_jbtnDeleteActionPerformed

    private void jbtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSaveActionPerformed

         if (jTextStatus.getText().equals("")) {
            JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please enter the values");
        } else {
            saveButtonAction();
           
        }
    }//GEN-LAST:event_jbtnSaveActionPerformed

    private void KodValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KodValueChanged
     if (evt.getValueIsAdjusting()) {
        int index=jKodList.getSelectedIndex();  
         jTextStatus.setText(list.get(index).getName());
         jTextColor.setText(list.get(index).getColor());
         jTextSequence.setText(list.get(index).getSequence());
         String isLastStatus=list.get(index).getIsLastStatus();
         if(isLastStatus.equals("Y"))
             jCheckLastStatus.setSelected(true);
         else
             jCheckLastStatus.setSelected(false);
       
         try {
            oldKodlist=dlCustomers.getKodRoleList(list.get(index).getId());
        } catch (BasicException ex) {
             Logger.getLogger(JPanelKodMaster.class.getName()).log(Level.SEVERE, null, ex);
         }
          updateMode = true;
     }
    }//GEN-LAST:event_KodValueChanged

    private void jButtonColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColourActionPerformed
       Color newColor = JColorChooser.showDialog(
                     this,
                     "Choose Background Color",
                     Color.WHITE);
      if (newColor != null) {
        jTextColor.setText(String.format("#%06x", newColor.getRGB() & 0x00FFFFFF));
      }
      
    }//GEN-LAST:event_jButtonColourActionPerformed

    private void jButtonRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRoleActionPerformed
      if(oldKodlist !=null){
        oldKodRolelist=new ArrayList();
        for(RoleInfo l:oldKodlist){
        oldKodRolelist.add(l.getName());
        }
      }
        newKodRoleList = JDialogRoles.showMessage(this,dlCustomers,m_App,oldKodRolelist);
     //rolesList= JFrameRoles.showMessage(this,dlCustomers,m_App);
        if(!JDialogRoles.isclose){
           roleUpdateMode=true;  
           }
    }//GEN-LAST:event_jButtonRoleActionPerformed

    private void jCheckLastStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckLastStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckLastStatusActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonColour;
    private javax.swing.JButton jButtonRole;
    private javax.swing.JCheckBox jCheckLastStatus;
    private javax.swing.JList jKodList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jSaver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextColor;
    private javax.swing.JTextField jTextSequence;
    private javax.swing.JTextField jTextStatus;
    private javax.swing.JButton jbtnDelete;
    private javax.swing.JButton jbtnNew;
    private javax.swing.JButton jbtnSave;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return AppLocal.getIntString("Menu.KODPanel"); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void activate() throws BasicException {
        jTextStatus.setText("");
        jTextColor.setText("");
        jTextSequence.setText("");
        jKodList.clearSelection();
        populateList();
       }

    @Override
    public boolean deactivate() {
       return true; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JComponent getComponent() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
      m_App=app;
      dlCustomers=(DataLogicCustomers) m_App.getBean("com.openbravo.pos.customers.DataLogicCustomers");
    }

    @Override
    public Object getBean() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }
    
    public void populateList() throws BasicException {

        model = new DefaultListModel();
        jKodList.setModel(model);
        list = dlCustomers.getKodList();
        for (int i = 0; i < list.size(); i++) {
        String listid = list.get(i).getName();
       
        model.add(i, listid);
        }
    }

    private void saveButtonAction() {
      try {
          int maxSeqNo;
             String status = jTextStatus.getText();
          String color = jTextColor.getText();
          String sequence = jTextSequence.getText();       
          String  isLastStatus=jCheckLastStatus.getText();        
          System.out.println("ISLASTSTATUS : " +isLastStatus);
           
            int maxSeqNoUpdation;
     //Insertion
        if (updateMode == false) {   
         if(model.contains(status)){
            JOptionPane.showMessageDialog(JPanelKodMaster.this, "Entered status already exists");
               jTextStatus.setText("");
               jTextColor.setText("");
               jTextSequence.setText("");
            
         }else{
        //inserting record as last status
           
//             sequenceList=new ArrayList<String>();
//             for (int i = 0; i < list.size(); i++) {
//                  String seqNumber =list.get(i).getSequence();
//                  sequenceList.add(seqNumber);
//              }
//             for (String seqNo : sequenceList){
//                 System.out.println("SEQNO::: " +seqNo);
//             }
//             
//        if(sequenceList.contains(sequence)){
//               JOptionPane.showMessageDialog(JPanelKodMaster.this, "Entered Sequence Number already exists.");
//        }else{
             
             
             if(jCheckLastStatus.isSelected()) {
                 maxSeqNo=dlCustomers.getMaxSequenceNo();
                 if(maxSeqNo > Integer.parseInt(sequence)){
                     JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please enter greater Sequence No.");
      
                     }else{
                         dlCustomers.updateKodStatus(); 
                         dlCustomers.insertKodStatus(RandomUtil.genRandom32Hex(), status, color,sequence,"Y",newKodRoleList);
                         jCheckLastStatus.setSelected(false);
                    }
            } //inserting record as intermediate status
             else{
                 
                
                        
                  maxSeqNo=dlCustomers.getLastStatusSequenceNo();
                 //checking for db records is last status exist?if yes
                  if(maxSeqNo!=0){
                      
                      
                        
                     if(maxSeqNo > Integer.parseInt(sequence) ){   
                        dlCustomers.insertKodStatus(RandomUtil.genRandom32Hex(), status, color,sequence,"N",newKodRoleList);
                      
                     }else{
                        JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please enter  Sequence No. less than last status sequence number");
                    }
                  }//if no
                  else{
                      dlCustomers.insertKodStatus(RandomUtil.genRandom32Hex(), status, color,sequence,"N",newKodRoleList);
                  }
           }
         // }
         }
        }//update
        else{
            String id = list.get(jKodList.getSelectedIndex()).getId();
            maxSeqNoUpdation= dlCustomers.getMaxSequenceNoInUpdation(id);
            if(jCheckLastStatus.isSelected()) {
              if(maxSeqNoUpdation >= Integer.parseInt(sequence)){
               JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please enter greater Sequence No.");
              }else{
                      dlCustomers.updateKodStatus(); 
                      dlCustomers.updateKod(id, status, color,sequence,"Y");
                      jCheckLastStatus.setSelected(false);
               }   
            }//if not selected 
             else {
                   maxSeqNoUpdation= dlCustomers.getLastStatusSequenceNoInUpdation(id);
                  if(maxSeqNoUpdation!=0){
                     if(maxSeqNoUpdation < Integer.parseInt(sequence)) {
                       JOptionPane.showMessageDialog(JPanelKodMaster.this, "Please enter lesser  Sequence No.");
                  }else{
                      dlCustomers.updateKod(id, status, color,sequence,"N");
                      jCheckLastStatus.setSelected(false); 
                     }
                  }else{
                      dlCustomers.updateKod(id, status, color,sequence,"N");
                      jCheckLastStatus.setSelected(false);
                 }
             }
       // dlCustomers.updateKod(id, status, color,sequence,"Y");
            if(roleUpdateMode){
                if(!equalLists(oldKodRolelist,newKodRoleList)){
                    dlCustomers.updateKodLines(id,newKodRoleList);
                 }
            }
                 updateMode = false; 
         }
         populateList();
         jTextStatus.setText("");
         jTextColor.setText("");
         jTextSequence.setText("");
         jCheckLastStatus.setSelected(false);
      } catch (BasicException ex) {
          Logger.getLogger(JPanelKodMaster.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    public static String genRandom32Hex() {
    SecureRandom ng = numberGenerator;
    if (ng == null) {
      numberGenerator = ng = new SecureRandom();
    }

    return Long.toHexString(MSB | ng.nextLong()) + Long.toHexString(MSB | ng.nextLong());
  }
   
    public  boolean equalLists(List<String> old, List<String> newone){     
    if (old == null && newone == null){
        return true;
    }

    if((old == null && newone != null) 
      || old != null && newone == null
      || old.size() != newone.size()){
        return false;
    }

    //to avoid messing the order of the lists we will use a copy
    //as noted in comments by A. R. S.
    old = new ArrayList<String>(old); 
    newone = new ArrayList<String>(newone);   

    Collections.sort(old);
    Collections.sort(newone);      
    return old.equals(newone);
}
    
}
