/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.sales;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.SentenceList;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.printer.DeviceTicket;
import com.openbravo.pos.printer.TicketParser;
import com.openbravo.pos.printer.TicketPrinterException;
import com.openbravo.pos.sales.restaurant.JNonServedSplitBillPanel;
import com.openbravo.pos.scripting.ScriptEngine;
import com.openbravo.pos.scripting.ScriptException;
import com.openbravo.pos.scripting.ScriptFactory;
import com.openbravo.pos.ticket.RetailTicketInfo;
import com.openbravo.pos.ticket.RetailTicketLineInfo;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JPanel;

/**
 *
 * @author archana
 */
public class JNonServedLinesPanel extends JPanel implements JPanelView, BeanFactoryApp {

    private SentenceList m_sentTable;
    private ComboBoxValModel m_TableModel;
    
    private SentenceList m_sentProductionArea;
    private ComboBoxValModel m_productionAreaModel;
    
    private DataLogicSales dlSales;
    private AppView m_App;
    int preparationStatus;
    String prodArea;
    String itemName;
    private DataLogicSystem m_dlSystem = null;
    private TicketParser m_TTP2;
    private TicketParser m_TTP;
    private DeviceTicket m_TP;
    protected DataLogicSystem dlSystem;
    private RetailTicketInfo ticket;
    private DataLogicReceipts dlReceipts = null;

    // private javax.swing.JPanel m_jPanelTicket;
    /**
     * Creates new form JNonServedLinesPanel
     */
    public JNonServedLinesPanel() {
        initComponents();
    }

    public void init(AppView app) throws BeanFactoryException {

        m_App = app;
        dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSales");
        m_dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
        dlReceipts = (DataLogicReceipts) app.getBean("com.openbravo.pos.sales.DataLogicReceipts");

        m_TP = new DeviceTicket();
        m_TTP2 = new TicketParser(m_App.getDeviceTicket(), m_dlSystem); // para imprimir el ticket
        m_TTP = new TicketParser(m_TP, m_dlSystem);
        dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
        jPanelNonServedLines.add(m_TP.getDevicePrinter("1").getPrinterComponent(), BorderLayout.CENTER);
        jButtonPrint.setEnabled(false);
        setVisible(true);


    }

    private void populateTables() {
        m_sentTable = dlSales.getTableList();
        m_TableModel = new ComboBoxValModel();

        List tableList = null;
        try {
            tableList = m_sentTable.list();
        } catch (BasicException ex) {
            ex.getMessage();
        }
        tableList.add(0, null);
        m_TableModel = new ComboBoxValModel(tableList);
        jcboTable.setModel(m_TableModel);
    }
    
        private void populateProductionArea() {
        m_sentProductionArea = dlSales.getProductionArea();
        m_productionAreaModel = new ComboBoxValModel();

        List productionAreaList = null;
        try {
            productionAreaList = m_sentProductionArea.list();
        } catch (BasicException ex) {
            ex.getMessage();
        }
        productionAreaList.add(0, null);
        m_productionAreaModel = new ComboBoxValModel(productionAreaList);
        jComboProductionArea.setModel(m_productionAreaModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcboTable = new javax.swing.JComboBox();
        jPanelNonServedLines = new javax.swing.JPanel();
        buttonExecute = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboProductionArea = new javax.swing.JComboBox();

        jLabel1.setText("Table");

        jcboTable.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcboTable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcboTableItemStateChanged(evt);
            }
        });
        jcboTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcboTableActionPerformed(evt);
            }
        });

        jPanelNonServedLines.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelNonServedLines.setLayout(new java.awt.BorderLayout());

        buttonExecute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/launch.png"))); // NOI18N
        buttonExecute.setText("Execute Filter");
        buttonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExecuteActionPerformed(evt);
            }
        });

        jButtonPrint.setText("Print");
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jLabel2.setText("Production Area");

        jComboProductionArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboProductionArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboProductionAreaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelNonServedLines, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jcboTable, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(jComboProductionArea, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcboTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonExecute)
                    .addComponent(jButtonPrint)
                    .addComponent(jLabel2)
                    .addComponent(jComboProductionArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanelNonServedLines, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcboTableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcboTableItemStateChanged
//        if (jcboTable.getSelectedIndex() > -1) {
//            buttonExecute.setEnabled(true);
//            // buttonExecute.setBackground(Color.cyan);
//        } else {
//            buttonExecute.setEnabled(false);
//            jPanelNonServedLines.setVisible(false);
//
//        }
    }//GEN-LAST:event_jcboTableItemStateChanged

    private void buttonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExecuteActionPerformed
       if (jcboTable.getSelectedIndex() > -1 && jComboProductionArea.getSelectedIndex() > -1) {
         buttonExecute.setEnabled(true);
         jButtonPrint.setEnabled(true);
        jPanelNonServedLines.setVisible(true);
        m_TP.getDevicePrinter("1").reset();
        String tableName = ((JPlacesInfo) jcboTable.getSelectedItem()).getName();
        String tableid = ((JPlacesInfo) jcboTable.getSelectedItem()).getId();
      //  String productionArea=((ProductionAreaInfo)jComboProductionArea.getSelectedItem()).getId();
        System.out.println("TABLE ID" + tableid);
        java.util.List<SharedSplitTicketInfo> splitticket = getSplitTicketInfo();
        if (splitticket.size() > 1) {
            String splitId = JNonServedSplitBillPanel.showMessage(JNonServedLinesPanel.this, tableName, splitticket);
            System.out.println("SPLIT ID " + splitId);
           // ticket = getTicketInfo(tableid, splitId);
            readTable(tableid, splitId);

        } else {
            readTable(tableid, null);
        }
       }else{
              buttonExecute.setEnabled(false);
         jButtonPrint.setEnabled(false);
        jPanelNonServedLines.setVisible(false);
       }

    }//GEN-LAST:event_buttonExecuteActionPerformed
    private void readTable(String tableId, String splitId) {
       String tableName = ((JPlacesInfo) jcboTable.getSelectedItem()).getName();
       String productionArea=((ProductionAreaInfo)jComboProductionArea.getSelectedItem()).getId();
        System.out.println("PRODUCTION AREA  captured:  " + productionArea); 
        try {

            if (splitId == null) {
             ticket = dlSales.getNonServedLinesTicket(tableId);
            } else{
             ticket = dlSales.getSplitNonServedLinesTicket(tableId, splitId);
            }
            List<RetailTicketLineInfo> ticketLines = ticket.getLines();
            List<RetailTicketLineInfo> nonServedLines = new ArrayList<RetailTicketLineInfo>();

            for (int i = 0; i < ticketLines.size(); i++) {
                preparationStatus = ticket.getLine(i).getPreparationStatus();
                prodArea=ticket.getLine(i).getProductionArea();
  
                System.out.println("STATUS " + preparationStatus); 
                System.out.println("PRODUCTION AREA :  " + ticket.getLine(i).getProductionArea()); 
               
                if (preparationStatus != 3 && prodArea.equals(productionArea)) {
                   nonServedLines.add(ticketLines.get(i));
                  }
          

            }
            Collections.sort(nonServedLines,CustomComparator);
            ticket.setNonServedLines(nonServedLines);
            String sresourcename = "Printer.NonServedLines";
            buttonExecute.setEnabled(ticket != null);
            m_TP.getDevicePrinter("1").reset();
            ScriptEngine script = ScriptFactory.getScriptEngine(ScriptFactory.VELOCITY);
            script.put("place",tableName);
            script.put("ticket", ticket);
              if(!nonServedLines.isEmpty()){
            m_TTP.printTicket(script.eval(m_dlSystem.getResourceAsXML(sresourcename)).toString());
              }else {
                  jPanelNonServedLines.setVisible(false);
                  jButtonPrint.setEnabled(false);
              }
     
            
        } catch (BasicException ex) {
            Logger.getLogger(JNonServedLinesPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ScriptException ex) {
            Logger.getLogger(JNonServedLinesPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TicketPrinterException ex) {
            Logger.getLogger(JNonServedLinesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jcboTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboTableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcboTableActionPerformed

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
      
       try {
           printTicket("Printer.NonServedLines", ticket);
            jPanelNonServedLines.setVisible(false);
            jButtonPrint.setEnabled(false);
            buttonExecute.setEnabled(false);
            jcboTable.setSelectedIndex(-1);
            jComboProductionArea.setSelectedIndex(-1);
        } catch (ScriptException ex) {
            Logger.getLogger(JNonServedLinesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jComboProductionAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboProductionAreaItemStateChanged
      if( jComboProductionArea.getSelectedIndex() > -1) {
            buttonExecute.setEnabled(true);
            // buttonExecute.setBackground(Color.cyan);
        } else {
            buttonExecute.setEnabled(false);
            jPanelNonServedLines.setVisible(false);

        }
    }//GEN-LAST:event_jComboProductionAreaItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExecute;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JComboBox jComboProductionArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanelNonServedLines;
    private javax.swing.JComboBox jcboTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Non-Served Lines";
    }

    @Override
    public void activate() throws BasicException {
        buttonExecute.setEnabled(false);
        jPanelNonServedLines.setVisible(false);
        populateTables();
        populateProductionArea();
    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public Object getBean() {
        return this;
    }

//    private void readTicket(String tableId) throws ScriptException {
//    RetailTicketInfo ticket = null;
//    
//    
//    }
    private void printTicket(String sresourcename, RetailTicketInfo ticket) throws ScriptException {

       String tableName = ((JPlacesInfo) jcboTable.getSelectedItem()).getName();
       String sresource = m_dlSystem.getResourceAsXML(sresourcename);
        ScriptEngine script = ScriptFactory.getScriptEngine(ScriptFactory.VELOCITY);
        try {
            script.put("place", tableName);
            script.put("ticket", ticket);
            m_TTP2.printTicket(script.eval(sresource).toString());

        } catch (TicketPrinterException ex) {
            Logger.getLogger(JNonServedLinesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    //method to get multiple tickets belongs to same table
    public java.util.List<SharedSplitTicketInfo> getSplitTicketInfo() {
        String place = ((JPlacesInfo) jcboTable.getSelectedItem()).getId();

        java.util.List<SharedSplitTicketInfo> splitticket = null;
        try {
            splitticket = dlReceipts.getRetailSharedSplitTicket(place);
            // System.out.println(splitticket.get(0).getId()+"getsplitmetho testing"); 
        } catch (BasicException e) {
            new MessageInf(e).show(JNonServedLinesPanel.this);
            return null;
        }
        return splitticket;
    }

//    //method to get content of selected ticket of split bill pop up
//    public RetailTicketInfo getTicketInfo(String tableId, String splitId) {
////          SharedTicketNameInfo sharedticket=null;
////          try {
////           sharedticket= dlReceipts.getRetailSharedTicket(place.getId());
////           ticket=sharedticket.getContent();
////          }
//        RetailTicketInfo ticket = null;
//        try {
//            ticket = dlReceipts.getRetailNonServedSharedTicketSplit(tableId, splitId);
//        } catch (BasicException e) {
//            new MessageInf(e).show(this);
//            return null;
//        }
//        return ticket;
//    }
    
     public static Comparator<RetailTicketLineInfo> CustomComparator = new Comparator<RetailTicketLineInfo>() {

        @Override
        public int compare(RetailTicketLineInfo l1, RetailTicketLineInfo l2) {
           //return l1.getKotid().compareTo(l2.getKotid());
            
                               if (l1.getKotid() == l2.getKotid())
    			return 0;
    		else if (l1.getKotid() >  l2.getKotid())
    			return 1;
    		else
    			return -1;

        }
    };
    
    
}
