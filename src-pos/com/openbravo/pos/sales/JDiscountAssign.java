//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.
package com.openbravo.pos.sales;

import com.openbravo.basic.BasicException;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.customers.DataLogicCustomers;
import com.openbravo.pos.forms.AppConfig;
import com.openbravo.pos.forms.AppUser;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.ticket.RetailTicketInfo;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Properties;

public class JDiscountAssign extends JDialog {

    private static DataLogicSystem m_dlSystem;
    AppUser appUser = null;
    private String hiddenname;
    public javax.swing.JDialog dEdior = null;
    private Properties dbp = new Properties();
    static DataLogicReceipts dlReceipts = null;
    private DataLogicCustomers dlCustomers = null;
    private AppView m_app;
    public String[] strings = {""};
    public DefaultListModel model = null;
    public java.util.List<DiscountRateinfo> list = null;
    public boolean updateMode = false;
    public JPanel parent = null;
    static RetailTicketInfo tinfoLocal = null;
    static Component parentLocal = null;
    int x = 500;
    int y = 300;
    int width = 350;
    int height = 220;

    private JDiscountAssign(Frame frame, boolean b) {
        super(frame, b);
        setBounds(x, y, width, height);

    }

    private JDiscountAssign(Dialog dialog, boolean b) {
        super(dialog, b);
        setBounds(x, y, width, height);
    }

    public static void showMessage(Component parent, DataLogicCustomers dlCustomers, AppView m_App, RetailTicketInfo tinfo) throws BasicException {
        tinfoLocal = tinfo;
        parentLocal = parent;
        m_dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
        dlReceipts = (DataLogicReceipts) m_App.getBean("com.openbravo.pos.sales.DataLogicReceipts");
        dlCustomers = (DataLogicCustomers) m_App.getBean("com.openbravo.pos.customers.DataLogicCustomers");
        showMessage(parent, dlCustomers);
    }

    private static void showMessage(Component parent, DataLogicCustomers dlCustomers) {

        Window window = getWindow(parent);
        JDiscountAssign myMsg;
        if (window instanceof Frame) {
            myMsg = new JDiscountAssign((Frame) window, true);
        } else {
            myMsg = new JDiscountAssign((Dialog) window, true);
        }
        myMsg.init(dlCustomers);

    }

    public void init(DataLogicCustomers dlCustomers) {

        initComponents();
        Window window = getWindow(parent);
        setTitle("Discount approval login");
        setVisible(true);
        File file = new File(System.getProperty("user.home") + "/openbravopos.properties");
        AppConfig ap = new AppConfig(file);
        ap.load();
        setBounds(180, 100, 200, 200);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jMgrCancelButton = new javax.swing.JButton();
        m_jmgrName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        m_jmgrPass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(200, 200));

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 300));
        jPanel1.setLayout(null);

        jMgrCancelButton.setBackground(new java.awt.Color(255, 255, 255));
        jMgrCancelButton.setMnemonic(KeyEvent.VK_ENTER);
        jMgrCancelButton.setText("Cancel");
        jMgrCancelButton.setMaximumSize(new java.awt.Dimension(83, 25));
        jMgrCancelButton.setMinimumSize(new java.awt.Dimension(83, 25));
        jMgrCancelButton.setPreferredSize(new java.awt.Dimension(83, 25));
        jMgrCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMgrCancelButtonActionPerformed(evt);
            }
        });
        jMgrCancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMgrCancelButtonKeyPressed(evt);
            }
        });
        jPanel1.add(jMgrCancelButton);
        jMgrCancelButton.setBounds(185, 118, 100, 25);

        m_jmgrName.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), null));
        jPanel1.add(m_jmgrName);
        m_jmgrName.setBounds(150, 30, 150, 25);

        jLabel1.setText("Enter Name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 28, 95, 25);

        jLabel2.setText("Enter Password");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 71, 110, 25);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setMnemonic(KeyEvent.VK_ENTER);
        jButton2.setText("Ok");
        jButton2.setMaximumSize(new java.awt.Dimension(83, 25));
        jButton2.setMinimumSize(new java.awt.Dimension(83, 25));
        jButton2.setPreferredSize(new java.awt.Dimension(83, 25));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(40, 118, 100, 25);

        m_jmgrPass.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), null));
        m_jmgrPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jmgrPassActionPerformed(evt);
            }
        });
        jPanel1.add(m_jmgrPass);
        m_jmgrPass.setBounds(150, 71, 150, 25);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private void m_jmgrPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jmgrPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_m_jmgrPassActionPerformed

    private void jMgrCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMgrCancelButtonActionPerformed
        // TODO add your handling code here:
        closeDialog();
    }//GEN-LAST:event_jMgrCancelButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // TODO add your handling code here:
        String name = m_jmgrName.getText();
        char[] password = m_jmgrPass.getPassword();
        if (name.length() != 0 && password.length != 0) {
            String visiblePass = "";
            for (int i = 0; i < password.length; i++) {
                visiblePass = visiblePass + password[i];
            }
            try {
                doLogin(name, visiblePass);
            } catch (BasicException ex) {
                Logger.getLogger(JDiscountAssign.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter valid Username/Password");
            m_jmgrName.setText("");
            m_jmgrPass.setText("");
        }
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
         String name = m_jmgrName.getText();
        char[] password = m_jmgrPass.getPassword();
        if (name.length() != 0 && password.length != 0) {
            String visiblePass = "";
            for (int i = 0; i < password.length; i++) {
                visiblePass = visiblePass + password[i];
            }
            try {
                doLogin(name, visiblePass);
            } catch (BasicException ex) {
                Logger.getLogger(JDiscountAssign.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter valid Username/Password");
            m_jmgrName.setText("");
            m_jmgrPass.setText("");
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton2KeyPressed

    private void jMgrCancelButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMgrCancelButtonKeyPressed
        closeDialog();        // TODO add your handling code here:
    }//GEN-LAST:event_jMgrCancelButtonKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jMgrCancelButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField m_jmgrName;
    private javax.swing.JPasswordField m_jmgrPass;
    // End of variables declaration//GEN-END:variables

    public void populateList(DataLogicCustomers dlCustomers) throws BasicException {

        model = new DefaultListModel();
        list = dlCustomers.getDiscountList();
        String[] dListId = null;
        String[] dListRate = null;
        for (int i = 0; i < list.size(); i++) {
            System.out.println("getPercentage " + list.get(i).getName());
            String listid = list.get(i).getName();
            model.add(i, listid);
            //dListRate[i] = list.get(i).getRate();
        }
    }

    private void saveButtonAction() throws BasicException {

        System.out.println("updatemode" + updateMode);

        list = dlCustomers.getDiscountList();
        if (updateMode == false) {
            int insertIndex = list.size() + 1;
        } else {
            updateMode = false;
        }
        populateList(dlCustomers);
    }

    private static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    public void doLogin(String user, String passw) throws BasicException {

        String role1 = dlReceipts.getRolebyName(user);
        System.out.println("Entered data:--> user is " + user + " password is " + passw);
        appUser = (AppUser) m_dlSystem.findPeopleByName(user);
        if (role1 != null && (!role1.isEmpty())) {
            String dbPasssword = appUser.getPassword();
            String dbuser = appUser.getName();
            String pID = appUser.getId();
            System.out.println("Got data:--> name is " + dbuser + " password is " + dbPasssword);
            if ((!user.equals("")) || (!passw.equals(""))) {
                if (user.equals(dbuser)) {
                    if (appUser.authenticate(passw)) {
                        closeDialog();
                        if (role1.equalsIgnoreCase("Admin") || role1.equalsIgnoreCase("Manager")) {
                            JRateEditor.showMessage(parentLocal, dlReceipts, tinfoLocal, role1,"");
                        } else {
                            JOptionPane.showMessageDialog(this, "Owner/Manager Privilages required for this operation");
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Invalid password");
                        m_jmgrPass.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid username");
                    m_jmgrName.setText("");
                    m_jmgrPass.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter username and password");
                m_jmgrName.setText("");
                m_jmgrPass.setText("");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username");
            m_jmgrName.setText("");
            m_jmgrPass.setText("");
        }
    }

    private void closeDialog() {
        this.dispose();
    }
}
