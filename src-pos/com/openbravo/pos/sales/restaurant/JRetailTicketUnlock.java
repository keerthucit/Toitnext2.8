/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.sales.restaurant;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.SentenceList;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.sales.DataLogicReceipts;
import com.openbravo.pos.sales.SharedSplitTicketInfo;
import com.openbravo.pos.sales.SharedTicketNameInfo;
import com.openbravo.pos.ticket.RetailTicketInfo;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;

/**
 *
 * @author shilpa
 */
public class JRetailTicketUnlock extends JPanel implements JPanelView, BeanFactoryApp {
     private AppView m_App;
      private DataLogicReceipts dlReceipts = null;
    private DataLogicSales dlSales = null;
    private DataLogicSystem dlSystem = null;
     private java.util.List<Place> m_aplaces;
    private java.util.List<Floor> m_afloors;
    Logger logger = Logger.getLogger("MyLog");  
    /**
     * Creates new form JRetailTicketUnlock
     */
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jPanelMap = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.CardLayout());

        m_jPanelMap.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());
        m_jPanelMap.add(jPanel1, java.awt.BorderLayout.NORTH);

        add(m_jPanelMap, "map");
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel m_jPanelMap;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
       return AppLocal.getIntString("Menu.Unlock");
    }

    @Override
    public void activate() throws BasicException {
        
    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
         
         m_App = app;
         dlReceipts = (DataLogicReceipts) app.getBean("com.openbravo.pos.sales.DataLogicReceipts");
        dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSales");
         dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
         try {
            SentenceList sent = new StaticSentence(
                    app.getSession(), 
                    "SELECT ID, NAME, IMAGE,ISTAKEAWAY FROM FLOORS ORDER BY NAME", 
                    null, 
                    new SerializerReadClass(Floor.class));
            m_afloors = sent.list();
               
                
            
        } catch (BasicException eD) {
            m_afloors = new ArrayList<Floor>();
        }
        try {
            SentenceList sent = new StaticSentence(
                    app.getSession(), 
                    "SELECT ID, NAME, X, Y, FLOOR FROM PLACES ORDER BY FLOOR", 
                    null, 
                    new SerializerReadClass(Place.class));
            m_aplaces = sent.list();
        } catch (BasicException eD) {
            m_aplaces = new ArrayList<Place>();
        }
        initComponents(); 
        // add the Floors containers
        if (m_afloors.size() > 1) {
            // A tab container for 2 or more floors
            JTabbedPane jTabFloors = new JTabbedPane();
            jTabFloors.applyComponentOrientation(getComponentOrientation());
            jTabFloors.setBorder(new javax.swing.border.EmptyBorder(new Insets(5, 5, 5, 5)));
            jTabFloors.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
            jTabFloors.setFocusable(false);
            jTabFloors.setRequestFocusEnabled(false);
            m_jPanelMap.add(jTabFloors, BorderLayout.CENTER);
            
            for (Floor f : m_afloors) {
                f.getContainer().applyComponentOrientation(getComponentOrientation());
                
                JScrollPane jScrCont = new JScrollPane();
                jScrCont.applyComponentOrientation(getComponentOrientation());
                JPanel jPanCont = new JPanel();  
                jPanCont.applyComponentOrientation(getComponentOrientation());
                
                jTabFloors.addTab(f.getName(), f.getIcon(), jScrCont);     
                jScrCont.setViewportView(jPanCont);
                jPanCont.add(f.getContainer());
            }
        } else if (m_afloors.size() == 1) {
            // Just a frame for 1 floor
            Floor f = m_afloors.get(0);
            f.getContainer().applyComponentOrientation(getComponentOrientation());
            
            JPanel jPlaces = new JPanel();
            jPlaces.applyComponentOrientation(getComponentOrientation());
            jPlaces.setLayout(new BorderLayout());
            
            jPlaces.setBorder(new javax.swing.border.CompoundBorder(
                    new javax.swing.border.EmptyBorder(new Insets(5, 5, 5, 5)),
                    new javax.swing.border.TitledBorder(f.getName())));
            
            JScrollPane jScrCont = new JScrollPane();
            jScrCont.applyComponentOrientation(getComponentOrientation());
            JPanel jPanCont = new JPanel();
            jPanCont.applyComponentOrientation(getComponentOrientation());
            
            // jPlaces.setLayout(new FlowLayout());           
            m_jPanelMap.add(jPlaces, BorderLayout.CENTER);
            jPlaces.add(jScrCont, BorderLayout.CENTER);
            jScrCont.setViewportView(jPanCont);            
            jPanCont.add(f.getContainer());
        }   
        
        // Add all the Table buttons.
        Floor currfloor = null;
        
        
        for (Place pl : m_aplaces) {
            int iFloor = 0;
            
            if (currfloor == null || !currfloor.getID().equals(pl.getFloor())) {
                // Look for a new floor
                do {
                    currfloor = m_afloors.get(iFloor++);
                } while (!currfloor.getID().equals(pl.getFloor()));
            }

            currfloor.getContainer().add(pl.getButton());
            pl.setButtonBounds();
            pl.getButton().addActionListener(new MyActionListener(pl));
        }
        
    }
    
    private class MyActionListener implements ActionListener {
        
        private Place m_place;
       public MyActionListener(Place place) {
            m_place = place;
        }   

        @Override
        public void actionPerformed(ActionEvent ae) {
            RetailTicketInfo ticket =null;
           java.util.List<SharedSplitTicketInfo> splitticket = getSplitTicketInfo(m_place);
           if(splitticket.size()==1){  
               ticket = getTicketInfo(m_place); 
                logger.info("Table:"+m_place.getName()+" was unlocked by user: "+m_App.getAppUserView().getUser().getName() +" already locked by user: "+ticket.printUser());
               ticket.setTicketOpen(false);
           try {
                 dlReceipts.updateSharedTicket(m_place.getId(), ticket);
            } catch (BasicException ex) {
                          Logger.getLogger(JRetailTicketUnlock.class.getName()).log(Level.SEVERE, null, ex);
                      }
           }else{
                for(SharedSplitTicketInfo splitInfo:splitticket){
                    ticket=getTicketInfo(m_place,splitInfo.getSplitId());
                    ticket.setTicketOpen(false);
                    try {
                 dlReceipts.updateSharedTicket(m_place.getId(), ticket);
            } catch (BasicException ex) {
                          Logger.getLogger(JRetailTicketUnlock.class.getName()).log(Level.SEVERE, null, ex);
                      }
                }
             
           }
          showMessage(JRetailTicketUnlock.this, "Table is unlocked Successfully");   
        }
        }
    

    @Override
    public Object getBean() {
        return this;
    }
    
    public RetailTicketInfo getTicketInfo(Place place) {
         RetailTicketInfo ticket=null;
        try {
           ticket= dlReceipts.getRetailSharedTicket(place.getId());
          }
          catch (BasicException e) {
            new MessageInf(e).show(JRetailTicketUnlock.this);
            return null;
        }
           System.out.println("retriving content from  db"+ticket);
          return ticket;
    }
    
     public java.util.List<SharedSplitTicketInfo> getSplitTicketInfo(Place place) {
          System.out.println(place.getIsSplit()+"split bill new method "+place.getId());
          java.util.List<SharedSplitTicketInfo> splitticket=null;
          try {
           splitticket= dlReceipts.getRetailSharedSplitTicket(place.getId()); 
          // System.out.println(splitticket.get(0).getId()+"getsplitmetho testing"); 
           }catch (BasicException e) {
            new MessageInf(e).show(JRetailTicketUnlock.this);
            return null;
        }
          return splitticket;
    }
     
      public RetailTicketInfo getTicketInfo(Place place,String splitId) {
          System.out.println(place.getIsSplit()+"split bill new method ");
          RetailTicketInfo ticket=null;
          try {
           System.out.println(splitId+place.getId()+"split bill getTicketInfo ");   
           ticket= dlReceipts.getRetailSharedTicketSplit(place.getId(),splitId);
          }catch (BasicException e) {
            new MessageInf(e).show(JRetailTicketUnlock.this);
            return null;
        }
          return ticket;
    }
      
       private void showMessage(JRetailTicketUnlock aThis, String msg) {
        JOptionPane.showMessageDialog(aThis, getLabelPanel(msg), "Message",
                                        JOptionPane.INFORMATION_MESSAGE);

    }
private JPanel getLabelPanel(String msg) {
    JPanel panel = new JPanel();
    Font font = new Font("Verdana", Font.BOLD, 12);
    panel.setFont(font);
    panel.setOpaque(true);
   // panel.setBackground(Color.BLUE);
    JLabel label = new JLabel(msg, JLabel.LEFT);
    label.setForeground(Color.GREEN);
    label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    panel.add(label);

    return panel;
}
}
