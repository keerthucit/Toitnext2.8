
package com.sysfore.pos.licensemanagement;

import com.lowagie.text.pdf.codec.Base64.InputStream;
import com.openbravo.basic.BasicException;
import com.openbravo.pos.forms.*;
import java.awt.Component;
import java.awt.HeadlessException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.net.URI;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.ws.rs.core.UriBuilder;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.representation.Form;

import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.UUID;
import javax.ws.rs.core.MediaType;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

public class LicensePanel extends javax.swing.JPanel implements JPanelView {

    private AppView m_App;

    public ClientEntity lc = null;
    private List<LicenceInfo> license;
    int licenseCount = 0;
    String callType = null;
    private DataLogicLicense m_dlLicense;
   SimpleDateFormat dateformat=new SimpleDateFormat("dd MMMM yyyy");
    SimpleDateFormat changeFormat=new SimpleDateFormat("yyyy-MM-dd");
    /**
     * Creates new form NewJPanel
     */
    public LicensePanel(AppView app) {
        this.m_App = app;
        initComponents();
        m_dlLicense = (DataLogicLicense) m_App.getBean("com.sysfore.pos.licensemanagement.DataLogicLicense");
      
    }

 public String getTitle() {
        return AppLocal.getIntString("Menu.LicenseActivation");
    }

    public void activate() throws BasicException {
        try {
            licenseCount = m_dlLicense.getLicenseCount();
        } catch (BasicException ex) {
            Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(licenseCount!=0){
            try {
                license = m_dlLicense.getLicenseDetails();
            } catch (BasicException ex) {
                Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    String purpose = LicenceManagementUtil.decrypt(license.get(0).getStrPurposeValue());
    String activated = LicenceManagementUtil.decrypt(license.get(0).getActivated());
    if(!purpose.equals("E") && activated.equals("N")){
        m_jRequest.setText("Activate");
    }else if(!purpose.equals("E") && activated.equals("Y")){
        m_jRequest.setText("Renew");
    }else{
         m_jRequest.setText("Initiate Activation");
    }
        String activatedToDate = LicenceManagementUtil.decrypt(license.get(0).getActivateTo());
       Date activation = null;
            try {
                activation = changeFormat.parse(activatedToDate);
           } catch (java.text.ParseException ex) {
                Logger.getLogger(LicenceInfo.class.getName()).log(Level.SEVERE, null, ex);
           }
       activatedToDate = dateformat.format(activation);
    if(purpose.equals("E")){
           jLabel4.setText("Your trial license is active and is valid till " +activatedToDate);

       }else{
            jLabel4.setText("Your license is active and is valid till " +activatedToDate);
        
       }
     showComboBox();
    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_jTxtLicenseKey = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        m_jTxtEmailid = new javax.swing.JTextField();
        m_jLbl = new javax.swing.JLabel();
        m_jCboStrPurpose = new javax.swing.JComboBox();
        m_jRequest = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel3.setText("License Key ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 60, 100, 20));

        m_jTxtLicenseKey.setColumns(20);
        m_jTxtLicenseKey.setFont(new java.awt.Font("Tahoma", 0, 11));
        m_jTxtLicenseKey.setLineWrap(true);
        m_jTxtLicenseKey.setRows(5);
        m_jTxtLicenseKey.setWrapStyleWord(true);
        m_jTxtLicenseKey.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane1.setViewportView(m_jTxtLicenseKey);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 190, 90));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel2.setText("Email Id");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 155, 90, 25));

        m_jTxtEmailid.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")));
        jPanel1.add(m_jTxtEmailid, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 155, 190, 25));

        m_jLbl.setFont(new java.awt.Font("Arial", 1, 12));
        m_jLbl.setText("Purpose");
        jPanel1.add(m_jLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 185, 100, 25));

        m_jCboStrPurpose.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Evaluation", "Testing", "Production" }));
        m_jCboStrPurpose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jCboStrPurposeActionPerformed(evt);
            }
        });
        jPanel1.add(m_jCboStrPurpose, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 185, 190, 25));

        m_jRequest.setBackground(new java.awt.Color(255, 255, 255));
        m_jRequest.setFont(new java.awt.Font("Arial", 1, 12));
        m_jRequest.setText("Initiate Activation");
        m_jRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jRequestActionPerformed(evt);
            }
        });
        jPanel1.add(m_jRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 150, -1));

        jLabel4.setForeground(new java.awt.Color(255, 51, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 670, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
private String getMacAddress(){
    InetAddress ip;
    String macAddress = null;
        try {

            ip = InetAddress.getLocalHost();
            NetworkInterface network = NetworkInterface.getByInetAddress(ip);
            byte[] mac = null;
            try {
                mac = network.getHardwareAddress();
            } catch (SocketException ex) {
                Logger.getLogger(LicensePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < mac.length; i++) {
                sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
            }
            macAddress = sb.toString();

        } catch (UnknownHostException e) {

            e.printStackTrace();

        } catch (SocketException e){

            e.printStackTrace();

        }
    return macAddress;
}

    private void m_jRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jRequestActionPerformed

        Pattern pEmail = Pattern.compile( "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$");
        String licenseKey = m_jTxtLicenseKey.getText();
        if(licenseKey.length()!=160){
            JOptionPane.showMessageDialog(this, "Please enter the valid license key");
        }else if(!pEmail.matcher(m_jTxtEmailid.getText()).matches()){
            JOptionPane.showMessageDialog(this, "Please enter the valid e-mail");
        }else{
            if(m_jRequest.getText().equals("Initiate Activation")){
                callType = "P";
            }
            else if(m_jRequest.getText().equals("Activate")){
                callType = "A";
            }
            else{
                callType = "R";
            }
            callWebService(callType);
             if(lc.getStatus().equals("N")){
                jLabel4.setText("The license key provided is not valid, Kindly email license@sysfore.com for any queries");
            }else{
            // if(lc.getActivated().equals("Y")){
            String id = UUID.randomUUID().toString();
            
            //Date sysDate = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date activationToDate = null;
            Date activationFromDate = null;
            try {
                activationToDate = sdf.parse(lc.getActivateTo());
            } catch (java.text.ParseException ex) {
                Logger.getLogger(LicenceInfo.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(lc.getStrPurposeValue().equals("E")){
                activationFromDate = new Date();
            }else{
                try {
                    activationFromDate = sdf.parse(lc.getActivateFrom());
                } catch (ParseException ex) {
                    Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           
            String currentDate = LicenceManagementUtil.encrypt(sdf.format(activationFromDate));
            String activationTo = LicenceManagementUtil.encrypt(sdf.format(activationToDate));

            String licenseTypeId= LicenceManagementUtil.encrypt(lc.getUsageType());
            String Active=LicenceManagementUtil.encrypt(lc.getActivated());
            String macId = LicenceManagementUtil.encrypt(lc.getMachineAddress());
            String strPurpose;
            if(m_jCboStrPurpose.getSelectedItem()=="Evaluation"){
                strPurpose = "E";
            }else if(m_jCboStrPurpose.getSelectedItem()=="Testing"){
                strPurpose = "T";
            }else{
                strPurpose = "P";
            }
         
            strPurpose = LicenceManagementUtil.encrypt(lc.getStrPurposeValue());
            String callType = LicenceManagementUtil.encrypt(lc.getCallType());
            String email = LicenceManagementUtil.encrypt(m_jTxtEmailid.getText());
            String info10 = LicenceManagementUtil.encrypt(UUID.randomUUID().toString());
             try {
            licenseCount = m_dlLicense.getLicenseCount();
            } catch (BasicException ex) {
                Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(licenseCount==0){
                try {
                    m_dlLicense.insertLicenseKey(id, licenseKey, currentDate, activationTo, licenseTypeId, Active, macId, strPurpose, callType, email, info10);
                } catch (BasicException ex) {
                    Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
                }
                //showLogin();
            }else{
                try {
                    m_dlLicense.updateLicense(id, licenseKey, currentDate, activationTo, licenseTypeId, Active, macId, strPurpose, callType, email, info10);
                } catch (BasicException ex) {
                    Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
                }
              //  showLogin();
            }
            showFields();
        }}
        //  }
}//GEN-LAST:event_m_jRequestActionPerformed
public void callWebService(String callType){
    JAXBContext jaxbContext = null;
    Unmarshaller unmarshaller = null;
    ClientResponse response;
    ClientConfig config = new DefaultClientConfig();
    Client client = Client.create(config);
    WebResource service = null;
        try {
            service = client.resource(getBaseURI());
        } catch (IOException ex) {
            Logger.getLogger(LicensePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    String licenseKey = m_jTxtLicenseKey.getText();
    licenseKey = licenseKey.substring(64, 96);
    String stremail = m_jTxtEmailid.getText();
    String strPurpose;
    if(m_jCboStrPurpose.getSelectedItem()=="Evaluation"){
        strPurpose = "E";
    }else if(m_jCboStrPurpose.getSelectedItem()=="Testing"){
        strPurpose = "T";
    }else{
        strPurpose = "P";
    }
    String id =UUID.randomUUID().toString();
    Form form = new Form();
    form.add("id", id);
    form.add("macaddress", getMacAddress());
    form.add("key", licenseKey);
    form.add("csinfo", "");
    form.add("productname", "POS-LITE");
    form.add("callType", callType);//R-Renew,A-Activation,P-Request for process
    form.add("strPurposeValue", strPurpose);//P-Production,T-Testing,E-Evaluation
    form.add("stremail", stremail);
    form.add("noofOrg", "20");
    form.add("contextName", "conLicence1");
    form.add("dbName", "licencedb");
    form.add("activated", "licence");
    form.add("customername", "jj");
    response = service.path("rest").path("todos").type(MediaType.APPLICATION_FORM_URLENCODED).post(ClientResponse.class, form);
    String xml = response.getEntity(String.class);
    //System.out.println("xml--"+xml);

    try {
        jaxbContext = JAXBContext.newInstance(ClientEntity.class);
        unmarshaller = jaxbContext.createUnmarshaller();
        
       //   System.out.println("xml--"+xml);
        lc = (ClientEntity) unmarshaller.unmarshal(new StringReader(xml));
    } catch (JAXBException ex) {
        Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
    }


}
public void showFields(){
    try {
        license = m_dlLicense.getLicenseDetails();
    } catch (BasicException ex) {
        Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
    }
    String validFrom = LicenceManagementUtil.decrypt(license.get(0).getActivateFrom());
    String validTo = LicenceManagementUtil.decrypt(license.get(0).getActivateTo());
    String purpose = LicenceManagementUtil.decrypt(license.get(0).getStrPurposeValue());
    int licenseExpCount = 0;
    try {
        licenseExpCount = m_dlLicense.getExpiryLicenseCount(validFrom, validTo);
    } catch (BasicException ex) {
        Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
    }
    String activatedToDate = LicenceManagementUtil.decrypt(license.get(0).getActivateTo());
   System.out.println("activatedToDate---"+activatedToDate);
   Date activation = null;
    try {
        activation = (Date) changeFormat.parse(activatedToDate);
    } catch (ParseException ex) {
        Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
    }

      activatedToDate = dateformat.format(activation);
    if(licenseExpCount==0){
        if(purpose.equals("E")){
        }else{
            String activated = LicenceManagementUtil.decrypt(license.get(0).getActivated());
            if(activated.equals("N")){
             //   showLicense();
                m_jRequest.setText("Activate");
                m_jTxtLicenseKey.setText("");
                m_jTxtEmailid.setText("");

            }else{
                  m_jRequest.setText("Renew");
                  
                 // jLabel4.setText("License key will expired on " +LicenceManagementUtil.decrypt(license.get(0).getActivateTo()));
                   jLabel4.setText("Your license is active and is valid till " +activatedToDate);
            }
        }
    }else{
        if(purpose.equals("E")){
            jLabel4.setText("Your trial license is active and is valid till " +activatedToDate);
        }else{

            String activated = LicenceManagementUtil.decrypt(license.get(0).getActivated());
            if(!purpose.equals("E") && activated.equals("N")){
                m_jTxtLicenseKey.setText("");
                m_jTxtEmailid.setText("");
                m_jRequest.setText("Activate");
                jLabel4.setText("Your license is not activated yet, kindly email license@sysfore.com for any queries. ");
            }else if(!purpose.equals("E") && activated.equals("Y")){
                  jLabel4.setText("Your license is active and is valid till " +activatedToDate);
                m_jRequest.setText("Renew");
            }
        }}
}
  private static URI getBaseURI() throws IOException {
        String myurl = "http://apps.sysfore.com";

        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) new URL(myurl).openConnection();
        } catch (MalformedURLException ex) {
            Logger.getLogger(LicensePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        con.setInstanceFollowRedirects(false);
        try {
            con.connect();
        } catch (IOException ex) {
            Logger.getLogger(LicensePanel.class.getName()).log(Level.SEVERE, null, ex);
        }


        InputStream is = (InputStream) con.getInputStream();
        if(con.getResponseCode()==301){
                 System.out.println("url:"+con.getHeaderField("Location"));
                 myurl = con.getHeaderField("Location");
        }

    return UriBuilder.fromUri(myurl).build();

}

    private void m_jCboStrPurposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jCboStrPurposeActionPerformed
     try {
        license = m_dlLicense.getLicenseDetails();
    } catch (BasicException ex) {
        Logger.getLogger(JRootApp.class.getName()).log(Level.SEVERE, null, ex);
    }
     String purpose;
     String selectedPurpose = (String) m_jCboStrPurpose.getSelectedItem();
     String strPurpose = LicenceManagementUtil.decrypt(license.get(0).getStrPurposeValue());
     String callType = LicenceManagementUtil.decrypt(license.get(0).getCallType());
     if(strPurpose.equals("E")){
         purpose = "Evaluation";
     }else if(strPurpose.equals("P")){
          purpose = "Production";
     }else{
         purpose = "Testing";
     }

        if(purpose.equals(selectedPurpose)){
            if(callType.equals("P")){
                m_jRequest.setText("Initiate Activation");
            }else if(callType.equals("A")){
                 m_jRequest.setText("Activate");
            }else{
                 m_jRequest.setText("Renew");
            }
        }else{
              m_jRequest.setText("Initiate Activation");
        }
   
    }//GEN-LAST:event_m_jCboStrPurposeActionPerformed
 private void showComboBox(){
        String purpose;
        if(licenseCount==0){
            purpose="";
        }else{
              purpose = LicenceManagementUtil.decrypt(license.get(0).getStrPurposeValue());
        }

        if(purpose.equals("")){
             m_jCboStrPurpose.addItem("Evaluation");
             m_jCboStrPurpose.addItem("Testing");
             m_jCboStrPurpose.addItem("Production");
        }else if(purpose.equals("E")){
             m_jCboStrPurpose.removeAllItems();
             m_jCboStrPurpose.addItem("Evaluation");
             m_jCboStrPurpose.addItem("Testing");
             m_jCboStrPurpose.addItem("Production");
        }else if(purpose.equals("P")){
            m_jCboStrPurpose.removeAllItems();
             m_jCboStrPurpose.addItem("Production");
        }else{
            m_jCboStrPurpose.removeAllItems();
             m_jCboStrPurpose.addItem("Testing");
             m_jCboStrPurpose.addItem("Production");
        }
 }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox m_jCboStrPurpose;
    private javax.swing.JLabel m_jLbl;
    private javax.swing.JButton m_jRequest;
    private javax.swing.JTextField m_jTxtEmailid;
    private javax.swing.JTextArea m_jTxtLicenseKey;
    // End of variables declaration//GEN-END:variables


    
  

    private void showMsg(Component c, String msg) throws HeadlessException {
        JOptionPane.showMessageDialog(c, msg);
    }


  
}
