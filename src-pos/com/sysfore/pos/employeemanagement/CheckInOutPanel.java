/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CheckInOutPanel.java
 *
 * Created on Mar 5, 2012, 11:54:22 AM
 */
package com.sysfore.pos.employeemanagement;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.pos.forms.*;
import com.openbravo.pos.sales.ProcessInfo;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author mateen
 */
public class CheckInOutPanel extends javax.swing.JPanel implements JPanelView {

    private AppView m_App;
    private DataLogicSystem dlSystem;
    private CheckInOutReceipts dlCReceipts;
    private java.util.List<AppUser> list = null;
    private java.util.List<AttendanceReasonsInfo> reasons = null;
    private boolean checkin;
    private boolean editTime;
    private int lTimeX = 0;
    private int lTimeY = 0;
    private int tTimeX = 0;
    private int tTimeY = 0;
    private int lEdTimeX = 0;
    private int lEdTimeY = 0;
    private int tEdTimeX = 0;
    private int tEdTimeY = 0;
    private int lReasonX = 0;
    private int lReasonY = 0;
    private int cmbReasonX = 0;
    private int cmbReasonY = 0;
    private int lTxtReasonX = 0;
    private int lTxtReasonY = 0;
    private int tReasonX = 0;
    private int tReasonY = 0;
    private int bCinX = 0;
    private int bCinY = 0;
    private int bCoutX = 0;
    private int bCoutY = 0;
    private int inc = 85;
    private DataLogicSales m_dlSales;
    /**
     * Creates new form NewJPanel
     */
    public CheckInOutPanel(AppView app) {

        this.m_App = app;
        initComponents();
        jTxtDate.setEditable(false);
        dlCReceipts = (CheckInOutReceipts) m_App.getBean("com.sysfore.pos.employeemanagement.CheckInOutReceipts");
        dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystem");
        m_dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSales");
        try {
            list = dlSystem.listPeopleVisible();
        } catch (BasicException ex) {
            Logger.getLogger(CheckInOutPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        reasons = dlCReceipts.getAttendanceReasons();
        InitFormData();
        setComponentXY();
       // setEmployeeCheckOutCount();
    }

    private void enableEditButtons() {
        boolean val = isEditTime();
        if (val) {
            jLblReason.setVisible(val);
            jCmbReason.setVisible(val);
            jLblReasonTxt.setVisible(val);
            jTxtReasonTxt.setVisible(val);
        } else {
            jLblReason.setVisible(val);
            jCmbReason.setVisible(val);
            jLblReasonTxt.setVisible(val);
            jTxtReasonTxt.setVisible(val);
        }
    }

    private String getCurrentTime(String format) {
        SimpleDateFormat dFormat = new SimpleDateFormat(format);
        String date = dFormat.format(new Date());
        return date;
    }
  
  private void setEmployeeCheckOutCount() {

      int processCount = 0;
      processCount = ProcessInfo.setProcessCount("Employee Checkinout", m_dlSales);
        if(processCount>=10){

            jBtnCheckIn.setEnabled(false);
            jBtnCheckOut.setEnabled(false);
         jLabel3.setVisible(true);
              jLabel3.setText("This feature is available for Professional edition.To continue using the same kindly upgrade to Professional Edition.");
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jBtnCheckIn = new javax.swing.JButton();
        jCmbEmp = new javax.swing.JComboBox();
        jTxtDate = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLblEmployee = new javax.swing.JLabel();
        jLblDate = new javax.swing.JLabel();
        jTxtTime = new javax.swing.JTextField();
        jLblTime = new javax.swing.JLabel();
        jBtnCheckOut = new javax.swing.JButton();
        jTxtEditTime = new javax.swing.JTextField();
        jLblEditTime = new javax.swing.JLabel();
        jBtnReset = new javax.swing.JButton();
        jCmbReason = new javax.swing.JComboBox();
        jLblReason = new javax.swing.JLabel();
        jTxtReasonTxt = new javax.swing.JTextField();
        jLblReasonTxt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jPanel2.setLayout(null);

        jBtnCheckIn.setText("CheckIn");
        jBtnCheckIn.setPreferredSize(new java.awt.Dimension(73, 15));
        jBtnCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCheckInActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnCheckIn);
        jBtnCheckIn.setBounds(260, 320, 114, 40);

        jCmbEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbEmpActionPerformed(evt);
            }
        });
        jPanel2.add(jCmbEmp);
        jCmbEmp.setBounds(180, 20, 269, 30);

        jTxtDate.setPreferredSize(new java.awt.Dimension(41, 28));
        jPanel2.add(jTxtDate);
        jTxtDate.setBounds(178, 70, 271, 28);

        jPanel1.setPreferredSize(new java.awt.Dimension(92, 18));

        jLblEmployee.setText("Employee");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLblEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel1);
        jPanel1.setBounds(12, 10, 110, 42);

        jLblDate.setText("Date");
        jPanel2.add(jLblDate);
        jLblDate.setBounds(30, 70, 120, 20);

        jTxtTime.setPreferredSize(new java.awt.Dimension(41, 28));
        jPanel2.add(jTxtTime);
        jTxtTime.setBounds(179, 118, 270, 28);

        jLblTime.setText("Time");
        jPanel2.add(jLblTime);
        jLblTime.setBounds(30, 120, 120, 20);

        jBtnCheckOut.setText("CheckOut");
        jBtnCheckOut.setPreferredSize(new java.awt.Dimension(73, 15));
        jBtnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCheckOutActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnCheckOut);
        jBtnCheckOut.setBounds(260, 320, 116, 40);

        jTxtEditTime.setPreferredSize(new java.awt.Dimension(41, 28));
        jPanel2.add(jTxtEditTime);
        jTxtEditTime.setBounds(179, 166, 270, 28);
        jTxtEditTime.setText(getCurrentTime("k:m"));

        jLblEditTime.setText("Time");
        jPanel2.add(jLblEditTime);
        jLblEditTime.setBounds(30, 170, 120, 20);

        jBtnReset.setText("Change Time");
        jBtnReset.setPreferredSize(new java.awt.Dimension(73, 15));
        jBtnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnResetActionPerformed(evt);
            }
        });
        jPanel2.add(jBtnReset);
        jBtnReset.setBounds(467, 117, 150, 30);

        jCmbReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbReasonActionPerformed(evt);
            }
        });
        jPanel2.add(jCmbReason);
        jCmbReason.setBounds(180, 214, 269, 30);

        jLblReason.setText("Reason");
        jPanel2.add(jLblReason);
        jLblReason.setBounds(30, 215, 120, 28);

        jTxtReasonTxt.setPreferredSize(new java.awt.Dimension(41, 28));
        jTxtReasonTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtReasonTxtActionPerformed(evt);
            }
        });
        jPanel2.add(jTxtReasonTxt);
        jTxtReasonTxt.setBounds(180, 262, 268, 28);
        jTxtEditTime.setText(getCurrentTime("k:m"));

        jLblReasonTxt.setText("Description");
        jPanel2.add(jLblReasonTxt);
        jLblReasonTxt.setBounds(30, 262, 120, 28);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCmbEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbEmpActionPerformed
        //m_jLocationDes.setVisible(m_ReasonModel.getSelectedItem() == MovementReason.OUT_CROSSING);
}//GEN-LAST:event_jCmbEmpActionPerformed

    private void jBtnCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCheckInActionPerformed

        int retVal = jbtnCheckInAction();
        if (retVal == 1) {
            showMsg(this, "CheckIn Successfully");
               ProcessInfo.setProcessInfo("Employee Checkinout", m_dlSales);
            disableCheckInOutButtons();
        }
    }//GEN-LAST:event_jBtnCheckInActionPerformed

    private void jBtnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCheckOutActionPerformed
        // TODO add your handling code here:
        int retVal = jbtnCheckOutAction();
        if (retVal == 1) {
            showMsg(this, "CheckOut Successfully");
               ProcessInfo.setProcessInfo("Employee Checkinout", m_dlSales);
            disableCheckInOutButtons();
        }
    }//GEN-LAST:event_jBtnCheckOutActionPerformed

    private void jBtnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnResetActionPerformed
        // TODO add your handling code here:
        setEditTime(true);
        jLblReasonTxt.setVisible(false);
        jTxtReasonTxt.setVisible(false);
        jLblEditTime.setVisible(true);
        jTxtEditTime.setVisible(true);
        jLblTime.setVisible(false);
        jTxtTime.setVisible(false);
        jTxtEditTime.setText(getCurrentTime("k:m"));
        jTxtDate.setText(getCurrentTime("dd/MM/yyyy"));
        jLblReason.setVisible(true);
        jCmbReason.setVisible(true);
        arrangeComponentsForEdit();
        jTxtEditTime.setEditable(true);
        if (isCheckin()) {
            setCheckInDescriptions();
        } else {
            setCheckOutDescriptions();
        }

    }//GEN-LAST:event_jBtnResetActionPerformed

    private void jCmbReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbReasonActionPerformed
        // TODO add your handling code here:

        if (jCmbReason.getSelectedItem().toString().equals("Other")) {
            rearrangeOtherReasonAndButtons();
            enableOtherReasonTxtFields(true);
        } else {
            rearrangeButtons();
            enableOtherReasonTxtFields(false);
        }
    }//GEN-LAST:event_jCmbReasonActionPerformed

    private void jTxtReasonTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtReasonTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtReasonTxtActionPerformed

    public String getTitle() {
        return AppLocal.getIntString("Menu.Checkinout");
    }

    public void activate() throws BasicException {

        String date = getCurrentTime("dd/MM/yyyy");
        jTxtDate.setText(date);
        String time = getCurrentTime("k:m");
        jTxtTime.setText(time);
        jLblTime.setVisible(true);
        jTxtTime.setVisible(true);
        jTxtEditTime.setVisible(false);
        jLblEditTime.setVisible(false);
        jBtnCheckIn.setVisible(false);
        jBtnCheckOut.setVisible(false);
        jBtnReset.setVisible(false);
        jLblReason.setVisible(false);
        jCmbReason.setVisible(false);
        jLblReasonTxt.setVisible(false);
        jTxtReasonTxt.setVisible(false);
        setEditTime(false);
       //setEmployeeCheckOutCount();

    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCheckIn;
    private javax.swing.JButton jBtnCheckOut;
    private javax.swing.JButton jBtnReset;
    private javax.swing.JComboBox jCmbEmp;
    private javax.swing.JComboBox jCmbReason;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLblDate;
    private javax.swing.JLabel jLblEditTime;
    private javax.swing.JLabel jLblEmployee;
    private javax.swing.JLabel jLblReason;
    private javax.swing.JLabel jLblReasonTxt;
    private javax.swing.JLabel jLblTime;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTxtDate;
    private javax.swing.JTextField jTxtEditTime;
    private javax.swing.JTextField jTxtReasonTxt;
    private javax.swing.JTextField jTxtTime;
    // End of variables declaration//GEN-END:variables

    private void InitFormData() {

        ArrayList<String> empNames = new ArrayList<String>();
        empNames.add("");
        for (AppUser user : list) {
            empNames.add(user.getName());
        }
        jCmbEmp.setModel(new ComboBoxValModel(empNames));
        jCmbEmp.addActionListener(new CustomEmployeeActionListener());
        String date = getCurrentTime("dd/MM/yyyy");
        jTxtDate.setText(date);
        String time = getCurrentTime("k:m");
        jTxtTime.setText(time);
        jTxtEditTime.setVisible(false);
        jLblEditTime.setVisible(false);
        jBtnCheckIn.setVisible(false);
        jBtnCheckOut.setVisible(false);
        jBtnReset.setVisible(false);
        jLblReason.setVisible(false);
        jCmbReason.setVisible(false);
        jLblReasonTxt.setVisible(false);
        jTxtReasonTxt.setVisible(false);
        setEditTime(false);
    }

    /**
     * @return the checkin
     */
    public boolean isCheckin() {
        return checkin;
    }

    /**
     * @param checkin the checkin to set
     */
    public void setCheckin(boolean checkin) {
        this.checkin = checkin;
    }

    private void rearrangeOtherReasonAndButtons() {
        jLblReasonTxt.setLocation(lReasonX, lReasonY);
        jTxtReasonTxt.setLocation(cmbReasonX, cmbReasonY);
        jBtnCheckIn.setLocation(tReasonX + inc, tReasonY);
        jBtnCheckOut.setLocation(tReasonX + inc, tReasonY);
    }

    private void setCheckInDescriptions() {

        ArrayList<String> descIn = new ArrayList<String>();
        descIn.add("");
        for (AttendanceReasonsInfo r : reasons) {
            descIn.add(r.getDescription());
        }
        jCmbReason.setModel(new ComboBoxValModel(descIn));
    }

    private void setCheckOutDescriptions() {

        ArrayList<String> descOut = new ArrayList<String>();
        descOut.add("");
        for (AttendanceReasonsInfo r : reasons) {
            descOut.add(r.getDescription());
        }
        jCmbReason.setModel(new ComboBoxValModel(descOut));
    }

    private void enableOtherReasonTxtFields(boolean b) {
        jLblReasonTxt.setVisible(b);
        jTxtReasonTxt.setVisible(b);

    }

    private boolean isValidReasonSelected() {
        boolean retVal = false;
        try {
            int index = jCmbReason.getSelectedIndex();
            String strSelectedVal = jCmbReason.getSelectedItem().toString();
            if (index > 0) {
                retVal = true;
            } else if (index > 0 && strSelectedVal.equals("Other")) {
                retVal = true;
            } else if (index == 0 || strSelectedVal.equals("") || strSelectedVal.isEmpty() || strSelectedVal == null) {
                retVal = false;
            } else if (isEditTime() && index > 0) {
                retVal = true;
            }
        } catch (NullPointerException ex) {
            retVal = false;
        }
        return retVal;
    }

    /**
     * @return the editTime
     */
    public boolean isEditTime() {
        return editTime;
    }

    /**
     * @param editTime the editTime to set
     */
    public void setEditTime(boolean editTime) {
        this.editTime = editTime;
    }

    private boolean isOtherReasonSelected() {
        boolean retVal = false;
        String strReason = null;
        int index = 0;
        try {
            index = jCmbReason.getSelectedIndex();
            strReason = jCmbReason.getSelectedItem().toString();
        } catch (NullPointerException ex) {
            retVal = false;
        }
        if (index > 0) {
            retVal = true;
        }
        return retVal;
    }

    private boolean isValidEnteredReason(String checkInDropDownVal, String txtReason) {

        boolean retVal = false;
        if ((!checkInDropDownVal.equals("Other")) || isTxtEntered(txtReason)) {
            retVal = true;
        } else if (checkInDropDownVal.equals("Other") && isTxtEntered(txtReason)) {
            retVal = true;
        }
        return retVal;
    }

    private boolean isTxtEntered(String txtReason) {

        if (txtReason.equals("") || txtReason.isEmpty()) {
            return false;
        } else {
            return true;
        }

    }

    private void showMsg(Component c, String msg) throws HeadlessException {
        JOptionPane.showMessageDialog(c, msg);
    }

    private void arrangeComponentsForEdit() {

        jLblEditTime.setLocation(lTimeX, lTimeY);
        jTxtEditTime.setLocation(tTimeX, tTimeY);
        jLblReason.setLocation(lEdTimeX, lEdTimeY);
        jCmbReason.setLocation(tEdTimeX, tEdTimeY);
        jBtnCheckIn.setLocation(cmbReasonX + inc, cmbReasonY);
        jBtnCheckOut.setLocation(cmbReasonX + inc, cmbReasonY);

    }

    private void rearrangeButtons() {
        jBtnCheckIn.setLocation(cmbReasonX + inc, cmbReasonY);
        jBtnCheckOut.setLocation(cmbReasonX + inc, cmbReasonY);
    }

    private boolean isAllFieldsValidated() {

        boolean retVal = false;
        String strTime = jTxtEditTime.getText();
        int length = strTime.length();
        String regx = "[a-zA-Z]";
        //String regx2 = "\\:d:\\:d";
        Pattern p = Pattern.compile(regx);
        Matcher m = p.matcher(strTime);

        if (length > 5 || m.find()) {
            showMsg(this, "Please Enter Valid Time");
            retVal = false;
        } else {
            retVal = true;
        }
        return retVal;
    }

    private class CustomEmployeeActionListener implements ActionListener {

        public void actionPerformed(ActionEvent ae) {
            setEditTime(false);
            if (empIsValid()) {
                boolean isToaday = true;
                arrangeComponents();
                //enableTime1andDisableTime2();
                setTimeFieldsEditable(false);
                jTxtTime.setEditable(false);
                String toDay = getCurrentTime("yyyy/MM/dd");
                String nowTime = getCurrentTime("k:m");
                jTxtDate.setText(getCurrentTime("dd/MM/yyyy"));
                String empid = list.get(jCmbEmp.getSelectedIndex() - 1).getId();
                String name = list.get(jCmbEmp.getSelectedIndex() - 1).getName();
                java.util.List<CheckInOutInfo> preList = dlCReceipts.getPreviousDateCheckInOut(empid, toDay);
                if (preList.size() > 0) {
                    if (!(getFormattedDate(preList.get(0).getCurrentdate())).equals(getCurrentTime("yyyy/MM/dd"))) {
                        // checkout for todays date
                        //showMsg(CheckInOutPanel.this, "Please check out for previous day");
                        System.out.println("Please check out for previous day");
                        if (preList.get(0).getCheckin().equals("Y")) {
                            enableCheckOutDiableAll();
                            previousDaySettings(getFormattedDate(preList.get(0).getCurrentdate()));
                            isToaday = false;
                        }
                    }
                }
                if (isToaday) {

                    // checkout for previouse
                    java.util.List<CheckInOutInfo> toList = dlCReceipts.getCheckInOutToday(empid, toDay);
                    if (toList.size() > 0) {
                        setTxtFields(nowTime, nowTime);
//                        if (toList.get(0).getCheckin().equals("Y")) {
//                            enableCheckOutDiableAll();
//                        }
//                        if (toList.get(0).getCheckout().equals("Y")) {
//                            enableCheckInDiableAll();
//                        }
                        if (toList.get(0).getCheckin().equals("Y") && toList.get(0).getCheckout().equals("N")) {
                            enableCheckOutDiableAll();
                        }
                        if (toList.get(0).getCheckin().equals("Y") && toList.get(0).getCheckout().equals("Y")) {
                            disableCheckInOutButtons();
                            showMsg(CheckInOutPanel.this, name + " has checkedout today");
                        }
                    } else {
                        enableCheckInDiableAll();
                    }

                }

            }
        }

        private void setTxtFields(String time, String editTime) {
            jTxtDate.setText(getCurrentTime("dd/MM/yyyy"));
            jTxtTime.setText(time);
            jTxtEditTime.setText(editTime);
        }

        private void arrangeComponents() {
            jBtnCheckIn.setLocation(tEdTimeX + inc, tEdTimeY);
            jBtnCheckOut.setLocation(tEdTimeX + inc, tEdTimeY);
        }

        private void enableTime1andDisableTime2() {
            jLblTime.setEnabled(true);
            jTxtTime.setEnabled(true);
            jLblEditTime.setEnabled(false);
            jTxtEditTime.setEnabled(false);
        }

        private void setTimeFieldsEditable(boolean b) {

            jTxtTime.setEditable(b);
            jTxtEditTime.setEditable(b);
        }

        private String getFormattedDate(Date currentdate) {
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            return format.format(currentdate);
        }

        private void previousDaySettings(String date) {
            String retVal = "";
            String[] str = date.split("/");
            for (int i = str.length; i > 0; i--) {
                retVal = retVal + str[i - 1] + "/";
            }
            retVal = retVal.substring(0, retVal.length() - 1);
            jTxtDate.setText(retVal);
        }
    }

    private void enableCheckInDiableAll() {
        jBtnCheckIn.setVisible(true);
        jBtnCheckOut.setVisible(false);
        jBtnReset.setVisible(true);
        enableEditButtons();
        setCheckin(true);
        setEditTime(false);

    }

    private void enableCheckOutDiableAll() {
        jBtnCheckIn.setVisible(false);
        jBtnCheckOut.setVisible(true);
        jBtnReset.setVisible(true);
        jLblTime.setVisible(true);
        jTxtTime.setVisible(true);
        jTxtTime.setEditable(false);
        jLblEditTime.setVisible(false);
        jTxtEditTime.setVisible(false);
        enableEditButtons();
        setCheckin(false);
        setEditTime(false);

    }

    private void disableCheckInOutButtons() {
        jCmbEmp.setSelectedIndex(0);
        jBtnCheckIn.setVisible(false);
        jBtnCheckOut.setVisible(false);
        jBtnReset.setVisible(false);
        jLblEditTime.setVisible(false);
        jTxtEditTime.setVisible(false);
        jLblTime.setVisible(true);
        jTxtTime.setVisible(true);
        jTxtReasonTxt.setText("");
        setEditTime(false);
        enableEditButtons();
     //    setEmployeeCheckOutCount();
    }

    private int jbtnCheckInAction() {

        // TODO add your handling code here:
        String reasonId = null;
        String otherReason = null;
        String txtReason = null;
        String checkInDropDownVal = null;
        int retVal = 0;
        if (empIsValid() && isAllFieldsValidated()) {
            String strIsCheck = null;
            Date date = null;
            String strDate = null;
            String empId = list.get(jCmbEmp.getSelectedIndex() - 1).getId();

            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            try {
                date = format.parse(jTxtDate.getText());
                String dd1 = format.format(date);

            } catch (ParseException ex) {
                Logger.getLogger(CheckInOutPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            SimpleDateFormat timeFormat = new SimpleDateFormat("k:m");
            Date dTime = null;
            try {
                dTime = timeFormat.parse(jTxtTime.getText());
            } catch (ParseException ex) {
                showMsg(this, "Enter valid time");
            }
            String strTime = timeFormat.format(dTime);
            Date dEditTime = null;
            try {
                dEditTime = timeFormat.parse(jTxtEditTime.getText());
            } catch (ParseException ex) {
                showMsg(this, "Enter valid time");
            }
            String strEditTime = timeFormat.format(dEditTime);
            if (!isEditTime()) {
                retVal = dlCReceipts.insertCheckInOut(empId, "Y", "N", strTime, strTime, date, null, null, null);
            } else if (isValidReasonSelected()) {
                reasonId = reasons.get(jCmbReason.getSelectedIndex() - 1).getId();
                checkInDropDownVal = reasons.get(jCmbReason.getSelectedIndex() - 1).getDescription();
                if (isOtherReasonSelected()) {
                    otherReason = reasons.get(jCmbReason.getSelectedIndex() - 1).getDescription();
                    txtReason = jTxtReasonTxt.getText();
                    if (isValidEnteredReason(checkInDropDownVal, txtReason)) {
                        retVal = dlCReceipts.insertCheckInOut(empId, "Y", "N", strTime, strEditTime, date, reasonId, otherReason, txtReason);
                    } else {
                        showMsg(this, "Please enter valid reason");
                    }
                }
            } else {
                showMsg(this, "Please select valid reason");
            }

        }
        return retVal;
    }

    private int jbtnCheckOutAction() {

        int retVal = 0;
        String reasonId = null;
        String otherReason = null;
        String txtReason = null;
        String checkInDropDownVal = null;
        // jTxtDate.setText(getCurrentTime("dd/MM/yyyy"));
        if (empIsValid() && isAllFieldsValidated()) {

            Date date = null;
            String strDate = null;
            String empId = list.get(jCmbEmp.getSelectedIndex() - 1).getId();
            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            try {
                date = format.parse(jTxtDate.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CheckInOutPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            strDate = format.format(date);
            SimpleDateFormat timeFormat = new SimpleDateFormat("k:m");
            Date dTime = null;
            try {
                dTime = timeFormat.parse(jTxtTime.getText());
            } catch (ParseException ex) {
                showMsg(this, "Enter valid time");
            }
            String systemCheckOutTime = timeFormat.format(dTime);
            Date editTime1 = null;
            try {
                editTime1 = timeFormat.parse(jTxtEditTime.getText());
            } catch (ParseException pe) {
                showMsg(this, "Enter valid edittime");
            }
            String empCheckOutTime = timeFormat.format(editTime1);
            List<CheckInOutInfo> checkInOut = dlCReceipts.getCheckInOut(empId);
            if (!isEditTime()) {
                retVal = dlCReceipts.updateCheckInOut(checkInOut.get(0).getId(), empId, systemCheckOutTime, empCheckOutTime, null, null, null);
            } else if (isValidReasonSelected()) {
                reasonId = reasons.get(jCmbReason.getSelectedIndex() - 1).getId();
                checkInDropDownVal = reasons.get(jCmbReason.getSelectedIndex() - 1).getDescription();
                if (isOtherReasonSelected()) {
                    otherReason = reasons.get(jCmbReason.getSelectedIndex() - 1).getDescription();
                    txtReason = jTxtReasonTxt.getText();
                    if (isValidEnteredReason(checkInDropDownVal, txtReason)) {
                        retVal = dlCReceipts.updateCheckInOut(checkInOut.get(0).getId(), empId, systemCheckOutTime, empCheckOutTime, checkInDropDownVal, otherReason, txtReason);
                    } else {
                        showMsg(this, "Please enter valid reason");
                    }
                }
            } else {
                showMsg(this, "Please select valid reason");
            }

        }
        return retVal;
    }

    public boolean empIsValid() {
        boolean retVal = false;
        if (jCmbEmp.getSelectedIndex() < 1) {
//            showMsg(this, "Please Select Employee");
            retVal = false;
        } else {
            retVal = true;
        }
        return retVal;
    }

    private void setComponentXY() {

        lTimeX = jLblTime.getX();
        lTimeY = jLblTime.getY();
        tTimeX = jTxtTime.getX();
        tTimeY = jTxtTime.getY();
        lEdTimeX = jLblEditTime.getX();
        lEdTimeY = jLblEditTime.getY();
        tEdTimeX = jTxtEditTime.getX();
        tEdTimeY = jTxtEditTime.getY();
        lReasonX = jLblReason.getX();
        lReasonY = jLblReason.getY();
        cmbReasonX = jCmbReason.getX();
        cmbReasonY = jCmbReason.getY();
        lTxtReasonX = jLblReasonTxt.getX();
        lTxtReasonY = jLblReasonTxt.getY();
        tReasonX = jTxtReasonTxt.getX();
        tReasonY = jTxtReasonTxt.getY();
        bCinX = jBtnCheckIn.getX();
        bCinY = jBtnCheckIn.getY();
        bCoutX = jBtnCheckOut.getX();
        bCoutY = jBtnCheckOut.getY();

    }
}
