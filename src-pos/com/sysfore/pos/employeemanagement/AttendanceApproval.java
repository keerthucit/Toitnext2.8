/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AttendanceApproval.java
 *
 * Created on Mar 20, 2012, 5:37:33 PM
 */
package com.sysfore.pos.employeemanagement;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dimension;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mateen
 */
public class AttendanceApproval extends javax.swing.JPanel implements JPanelView {

    private CheckInOutReceipts cReceipt;
    private java.util.List<CheckInOutInfo> aCheckInLines = null;
    private java.util.List<CheckInOutInfo> aCheckOutLines = null;
    private int checkInSize = 0;
    private int checkOutSize = 0;
    private String[] columnCInNames;
    private String[] columnCOutNames;
    private AppView app;
    private DataLogicSystem dlSystem;
    private List list;
    private String action;

    /**
     * Creates new form AttendanceApproval
     */
    public AttendanceApproval(AppView app) {

        this.app = app;
        this.cReceipt = (CheckInOutReceipts) app.getBean("com.sysfore.pos.employeemanagement.CheckInOutReceipts");
        this.dlSystem = (DataLogicSystem) app.getBean("com.openbravo.pos.forms.DataLogicSystem");
        try {
            list = dlSystem.listPeopleVisible();
        } catch (BasicException ex) {
            Logger.getLogger(CheckInOutPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        initTableDataAndFilter();
    }

    private void filterAction() {
        // TODO add your handling code here:

        String date = jTxtDate.getText();
        date = getTrimFormatted(date);
        String conditionCheckin = "";
        String conditionCheckOut = "";
        String checkInDesc = "";
        if (getAction().equals("All")) {
            conditionCheckin = "AND C.CHECKIN='Y' AND CURRENTDATE='" + date + "' AND C.CHECKINDESCID!='"+checkInDesc+"' ";//AND CHECKINDESCID!='NULL'
            conditionCheckOut = "AND C.CHECKOUT='Y' AND CURRENTDATE='" + date + "'AND CHECKOUTDESCID!='NULL' ";
        } else if (getAction().equals("Approved")) {
            conditionCheckin = "AND CHECKINATTENDANCEAPPROVAL= 'Y' AND C.CHECKIN='Y' AND CURRENTDATE='" + date + "' AND C.CHECKINDESCID!='"+checkInDesc+"' ";// AND CHECKINDESCID!='NULL'
            conditionCheckOut = "AND CHECKOUTATTENDANCEAPPROVAL= 'Y' AND C.CHECKOUT='Y' AND CURRENTDATE='" + date + "' AND CHECKOUTDESCID!='NULL'";
        } else if (getAction().equals("Disapproved")) {
            conditionCheckin = "AND CHECKINATTENDANCEAPPROVAL= 'N' AND C.CHECKIN='Y' AND CURRENTDATE='" + date + "' AND C.CHECKINDESCID!='"+checkInDesc+"' ";//AND CHECKINDESCID!='NULL'
            conditionCheckOut = "AND CHECKOUTATTENDANCEAPPROVAL= 'N' AND C.CHECKOUT='Y' AND CURRENTDATE='" + date + "' AND CHECKOUTDESCID!='NULL' ";
        } else {
            conditionCheckin = "AND CHECKINATTENDANCEAPPROVAL= '' AND C.CHECKIN='Y' AND CURRENTDATE='" + date + "' AND C.CHECKINDESCID!='"+checkInDesc+"' ";//  AND CHECKINDESCID!='NULL'
            conditionCheckOut = "AND CHECKOUTATTENDANCEAPPROVAL= '' AND C.CHECKOUT='Y' AND CURRENTDATE='" + date + "' AND CHECKOUTDESCID!='NULL' ";
        }
        aCheckInLines = cReceipt.getAllCheckInOut(conditionCheckin);
        aCheckOutLines = cReceipt.getAllCheckInOut(conditionCheckOut);
        checkInSize = aCheckInLines.size();
        checkOutSize = aCheckOutLines.size();
        setCheckInTableModelAndHeader(jTAttCheckIn, checkInSize);
        setCellRenderer(jTAttCheckIn);
        setCheckInTableData(jTAttCheckIn);
        setCheckOutTableModelAndHeader(jTAttCheckOut, checkOutSize);
        setCellRenderer2(jTAttCheckOut);
        setCheckOutTableData(jTAttCheckOut);
    }

    private String getFormattedDate(Date date, String pattern) {
        java.text.Format format = new SimpleDateFormat(pattern);
        String strDate = format.format(date);
        return strDate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPnlAttendanceMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAttCheckIn = new javax.swing.JTable();
        jLblCheckIn = new javax.swing.JLabel();
        jLblCheckOut = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTAttCheckOut = new javax.swing.JTable();
        jLblDate = new javax.swing.JLabel();
        jLblAction = new javax.swing.JLabel();
        jTxtDate = new javax.swing.JTextField();
        jCmbAction = new javax.swing.JComboBox();
        jBtnFilter = new javax.swing.JButton();
        m_jbtnpodate1 = new javax.swing.JButton();
        jBtnReject = new javax.swing.JButton();
        jBtnApprove = new javax.swing.JButton();

        jPnlAttendanceMain.setLayout(null);

        jTAttCheckIn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTAttCheckIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Name", "Date", "System Time", "CheckIn Time", "Reason", "Description", "Approve/Reject"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTAttCheckIn.setToolTipText("CheckIn Table");
        jTAttCheckIn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTAttCheckIn.setRowHeight(27);
        jTAttCheckIn.getTableHeader().setReorderingAllowed(false);
        jTAttCheckIn.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(jTAttCheckIn);
        jTAttCheckIn.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTAttCheckIn.getColumnModel().getColumn(0).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTAttCheckIn.getColumnModel().getColumn(1).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(2).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(3).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(4).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(5).setResizable(false);
        jTAttCheckIn.getColumnModel().getColumn(6).setResizable(false);

        jPnlAttendanceMain.add(jScrollPane1);
        jScrollPane1.setBounds(0, 120, 700, 210);

        jLblCheckIn.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLblCheckIn.setText("CheckIn Approval");
        jPnlAttendanceMain.add(jLblCheckIn);
        jLblCheckIn.setBounds(0, 100, 150, 14);

        jLblCheckOut.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLblCheckOut.setText("CheckOut Approval");
        jPnlAttendanceMain.add(jLblCheckOut);
        jLblCheckOut.setBounds(0, 350, 150, 14);

        jTAttCheckOut.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Name", "Date", "System Time", "CheckIn Time", "Reason", "Description", "Approve/Reject"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTAttCheckOut.setRowHeight(27);
        jTAttCheckOut.getTableHeader().setReorderingAllowed(false);
        jTAttCheckOut.setUpdateSelectionOnSort(false);
        jScrollPane2.setViewportView(jTAttCheckOut);
        jTAttCheckOut.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jTAttCheckOut.getColumnModel().getColumn(0).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTAttCheckOut.getColumnModel().getColumn(1).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(2).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(3).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(4).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(5).setResizable(false);
        jTAttCheckOut.getColumnModel().getColumn(6).setResizable(false);

        jPnlAttendanceMain.add(jScrollPane2);
        jScrollPane2.setBounds(0, 370, 700, 210);

        jLblDate.setText("Date");
        jPnlAttendanceMain.add(jLblDate);
        jLblDate.setBounds(150, 10, 110, 20);

        jLblAction.setText("Action");
        jPnlAttendanceMain.add(jLblAction);
        jLblAction.setBounds(150, 40, 110, 20);
        jPnlAttendanceMain.add(jTxtDate);
        jTxtDate.setBounds(270, 10, 170, 20);

        jCmbAction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Approved", "Disapproved", "No Action" }));
        jCmbAction.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")));
        jCmbAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbActionActionPerformed(evt);
            }
        });
        jPnlAttendanceMain.add(jCmbAction);
        jCmbAction.setBounds(270, 40, 170, 20);

        jBtnFilter.setBackground(new java.awt.Color(255, 255, 255));
        jBtnFilter.setText("Ok");
        jBtnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFilterActionPerformed(evt);
            }
        });
        jPnlAttendanceMain.add(jBtnFilter);
        jBtnFilter.setBounds(300, 80, 120, 30);

        m_jbtnpodate1.setBackground(new java.awt.Color(255, 255, 255));
        m_jbtnpodate1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        m_jbtnpodate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jbtnpodate1ActionPerformed(evt);
            }
        });
        jPnlAttendanceMain.add(m_jbtnpodate1);
        m_jbtnpodate1.setBounds(470, 10, 49, 25);

        jBtnReject.setBackground(new java.awt.Color(255, 255, 255));
        jBtnReject.setText("Reject");
        jBtnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRejectActionPerformed(evt);
            }
        });
        jPnlAttendanceMain.add(jBtnReject);
        jBtnReject.setBounds(380, 600, 130, 30);

        jBtnApprove.setBackground(new java.awt.Color(255, 255, 255));
        jBtnApprove.setText("Approve");
        jBtnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnApproveActionPerformed(evt);
            }
        });
        jPnlAttendanceMain.add(jBtnApprove);
        jBtnApprove.setBounds(240, 600, 130, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPnlAttendanceMain, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlAttendanceMain, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void m_jbtnpodate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jbtnpodate1ActionPerformed
        showCalendar();
    }

    private void showCalendar() {
        Date date = null;
        date = JCalendarDialog.showCalendarTime(this, date);
        if (date != null) {
            String strDate = getFormattedDate(date, "dd-MM-yyyy");
            jTxtDate.setText(strDate);
        } // TODO add your handling code here:
}//GEN-LAST:event_m_jbtnpodate1ActionPerformed

    private void jBtnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFilterActionPerformed
        String strDate = jTxtDate.getText();
        Pattern p = Pattern.compile("\\d{1,2}-\\d{1,2}-\\d{4}");
        java.util.regex.Matcher m = p.matcher(strDate);
        if (strDate == null || strDate.isEmpty()) {
            showMsg("Please select date");
        } else if (strDate.length() > 10 || !m.find()) {
            showMsg("Please Select Valid Date");
        } else {
            filterAction();
        }
    }//GEN-LAST:event_jBtnFilterActionPerformed

    private void jCmbActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbActionActionPerformed
        // TODO add your handling code here:
        setAction(jCmbAction.getSelectedItem().toString());
    }//GEN-LAST:event_jCmbActionActionPerformed

    private void jBtnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnApproveActionPerformed
        // TODO add your handling code here:
        approveCheckInOut();
    }//GEN-LAST:event_jBtnApproveActionPerformed

    private void jBtnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRejectActionPerformed
        // TODO add your handling code here:
        rejectCheckInOut();
    }//GEN-LAST:event_jBtnRejectActionPerformed

    public String getTitle() {
        return AppLocal.getIntString("AA.Menu");
    }

    public void activate() throws BasicException {
        jTxtDate.setText(getFormattedDate(new Date(), "dd-MM-yyyy"));
        String toDay = getTodaysDateyyyyMMdd();
        setAction("No Action");
        jCmbAction.setSelectedIndex(0);
        filterAction();
    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return AttendanceApproval.this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBtnApprove;
    private javax.swing.JButton jBtnFilter;
    private javax.swing.JButton jBtnReject;
    private javax.swing.JComboBox jCmbAction;
    private javax.swing.JLabel jLblAction;
    private javax.swing.JLabel jLblCheckIn;
    private javax.swing.JLabel jLblCheckOut;
    private javax.swing.JLabel jLblDate;
    private javax.swing.JPanel jPnlAttendanceMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTAttCheckIn;
    private javax.swing.JTable jTAttCheckOut;
    private javax.swing.JTextField jTxtDate;
    private javax.swing.JButton m_jbtnpodate1;
    // End of variables declaration//GEN-END:variables

    private void initTableDataAndFilter() {
        jTxtDate.setText(getFormattedDate(new Date(), "dd-MM-yyyy"));
        setAction("No Action");
        String date = getTodaysDateyyyyMMdd();
        columnCInNames = new String[]{
            "Employee Name", "Date", "System Time", "CheckIn Time", "Reason", "Description", "Approve"
        };
        columnCOutNames = new String[]{
            "Employee Name", "Date", "System Time", "CheckIn Time", "Reason", "Description", "Reject"
        };
        filterAction();

    }

    private void setCheckInTableModelAndHeader(JTable table, int size) {
        table.getTableHeader().setPreferredSize(new Dimension(30, 25));
        table.setModel(new DefaultTableModel(columnCInNames, size));
    }

    private void setCheckOutTableModelAndHeader(JTable table, int size) {
        table.getTableHeader().setPreferredSize(new Dimension(30, 25));
        table.setModel(new DefaultTableModel(columnCOutNames, size));
    }

    private void setCellRenderer(JTable table) {
        table.getColumn("Approve").setCellRenderer(new CustomRadioButtonEditor(table));
    }

    private void setCellRenderer2(JTable table) {
        table.getColumn("Reject").setCellRenderer(new CustomRadioButtonEditor(table));
    }

    private void setCheckInTableData(JTable table) {

        for (int col = 0; col < checkInSize; col++) {
            table.setValueAt(aCheckInLines.get(col).getEmpname(), col, 0);
        }
        for (int col = 0; col < checkInSize; col++) {
            table.setValueAt(getFormattedDate(aCheckInLines.get(col).getCurrentdate(), "dd-MM-yyyy"), col, 1);
        }
        for (int col = 0; col < checkInSize; col++) {
            table.setValueAt(aCheckInLines.get(col).getSystemcheckintime(), col, 2);
        }
        for (int col = 0; col < checkInSize; col++) {
            table.setValueAt(aCheckInLines.get(col).getEmpcheckintime(), col, 3);
        }
        for (int col = 0; col < checkInSize; col++) {
            try {
                if (!aCheckInLines.get(col).getCheckindesc().equals("null")) {
                    table.setValueAt(aCheckInLines.get(col).getCheckindesc(), col, 4);
                }
            } catch (Exception e) {
            }
        }
        for (int col = 0; col < checkInSize; col++) {
            try {
                if (!aCheckInLines.get(col).getOthercheckindesc().equals("null")) {
                    table.setValueAt(aCheckInLines.get(col).getOthercheckindesc(), col, 5);
                }
            } catch (Exception e) {
            }
        }
        for (int col = 0; col < checkInSize; col++) {
            try {
                if (!aCheckInLines.get(col).getCheckinattendanceapproval().equals("null")) {
                    if (aCheckInLines.get(col).getCheckinattendanceapproval().equals("Y")) {
                        table.changeSelection(col, col, true, false);
                    }
                }
            } catch (Exception e) {
                System.out.println("ex");
            }
        }
    }

    private void setCheckOutTableData(JTable table) {
        for (int col = 0; col < checkOutSize; col++) {
            table.setValueAt(aCheckOutLines.get(col).getEmpname(), col, 0);
        }
        for (int col = 0; col < checkOutSize; col++) {
            table.setValueAt(getFormattedDate(aCheckOutLines.get(col).getCurrentdate(), "dd-MM-yyyy"), col, 1);
        }
        for (int col = 0; col < checkOutSize; col++) {
            table.setValueAt(aCheckOutLines.get(col).getSystemcheckouttime(), col, 2);
        }
        for (int col = 0; col < checkOutSize; col++) {
            table.setValueAt(aCheckOutLines.get(col).getEmpchekcouttime(), col, 3);
        }
        for (int col = 0; col < checkOutSize; col++) {
            try {
                if (!aCheckOutLines.get(col).getCheckoutdesc().equals("null")) {
                    table.setValueAt(aCheckOutLines.get(col).getCheckoutdesc(), col, 4);
                }
            } catch (Exception e) {
            }
        }
        for (int col = 0; col < checkOutSize; col++) {
            try {
                if (!aCheckOutLines.get(col).getOthercheckoutdesc().equals("null")) {
                    table.setValueAt(aCheckOutLines.get(col).getOthercheckoutdesc(), col, 5);
                }
            } catch (Exception e) {
            }
        }
        for (int col = 0; col < checkOutSize; col++) {
            try {
                if (!aCheckOutLines.get(col).getCheckoutattendanceapproval().equals("null")) {
                    if (aCheckOutLines.get(col).getCheckoutattendanceapproval().equals("N")) {
                        table.changeSelection(col, col, true, false);
                    }
                }
            } catch (Exception e) {
            }
        }
    }

    private void approveCheckInOut() {
        boolean exe = false;
        int result = 0;
        int[] rowsCIn = jTAttCheckIn.getSelectedRows();
        //updateCInAttndListByDate();
        for (int i = 0; i < rowsCIn.length; i++) {
            int row = rowsCIn[i];
            String id = aCheckInLines.get(row).getId();
            result = cReceipt.approveCheckInOut(id, " CHECKINATTENDANCEAPPROVAL = 'Y' ");
            exe = true;
        }
        int[] rowsCOut = jTAttCheckOut.getSelectedRows();
        for (int i = 0; i < rowsCOut.length; i++) {
            int row = rowsCOut[i];
            String id = aCheckOutLines.get(row).getId();
            result = cReceipt.approveCheckInOut(id, " CHECKOUTATTENDANCEAPPROVAL = 'Y' ");
            exe = true;
        }
        showMsg("Attendance Approved");
        resetTable("checkin");
    }

    private void showMsg(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }

    private void rejectCheckInOut() {

        boolean exe = false;
        int result = 0;
        int[] rowsCIn = jTAttCheckIn.getSelectedRows();
        //updateCInAttndListByDate();
        for (int i = 0; i < rowsCIn.length; i++) {
            int row = rowsCIn[i];
            String id = aCheckInLines.get(row).getId();
            result = cReceipt.approveCheckInOut(id, " CHECKINATTENDANCEAPPROVAL = 'N' ");
            exe = true;
        }
        int[] rowsCOut = jTAttCheckOut.getSelectedRows();
        for (int i = 0; i < rowsCOut.length; i++) {
            int row = rowsCOut[i];
            String id = aCheckOutLines.get(row).getId();
            result = cReceipt.approveCheckInOut(id, " CHECKOUTATTENDANCEAPPROVAL = 'N' ");
            exe = true;
        }
        showMsg("Attendance Rejected");
        resetTable("xyz");
    }

    private void resetTable(String table) {

        if (table.equals("checkin")) {
            aCheckInLines = cReceipt.getAllCheckInOut("AND CHECKINATTENDANCEAPPROVAL='' AND CURRENTDATE='" + getTrimFormatted(jTxtDate.getText()) + "'");
            checkInSize = aCheckInLines.size();
            setCheckInTableModelAndHeader(jTAttCheckIn, checkInSize);
            setCellRenderer(jTAttCheckIn);
            setCheckInTableData(jTAttCheckIn);
        } else {
            aCheckOutLines = cReceipt.getAllCheckInOut("AND CHECKOUTATTENDANCEAPPROVAL='' AND CURRENTDATE='" + getTrimFormatted(jTxtDate.getText()) + "'");
            checkOutSize = aCheckOutLines.size();
            setCheckOutTableModelAndHeader(jTAttCheckOut, checkOutSize);
            setCellRenderer2(jTAttCheckOut);
            setCheckOutTableData(jTAttCheckOut);
        }
    }

    /**
     * @return the action
     */
    public String getAction() {
        return action;
    }

    /**
     * @param action the action to set
     */
    public void setAction(String action) {
        this.action = action;
    }

    private String getTodaysDateyyyyMMdd() {

        String strDate = "";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        strDate = sdf.format(new Date());
        return strDate;
    }

    private String getDateyyyyMMdd() {
        return jTxtDate.getText();
    }

//    private void updateCInAttndListByDate() {
//        for (int i = 0; i < checkInSize; i++) {
//            String id = aCheckInLines.get(i).getId();
//            cReceipt.approveCheckInOut(id, " CHECKINATTENDANCEAPPROVAL = 'N' ");
//        }
//    }
//
//    private void updateCOutAttndListByDate() {
//        for (int i = 0; i < checkOutSize; i++) {
//            String id = aCheckOutLines.get(i).getId();
//            cReceipt.approveCheckInOut(id, " CHECKOUTATTENDANCEAPPROVAL = 'N' ");
//        }
//
//
//    }
    private String getFormattedDate(String strDate, String pattern) {
        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        Date d = null;

        try {

            d = sdf.parse(strDate);
        } catch (ParseException ex) {
            Logger.getLogger(AttendanceApproval.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sdf.format(d);
    }

    private String getTrimFormatted(String date) {
        String retVal = "";
        String[] str = date.split("-");
        for (int i = str.length; i > 0; i--) {
            retVal = retVal + str[i - 1] + "-";
        }
        return retVal.substring(0, retVal.length() - 1);
    }
}
