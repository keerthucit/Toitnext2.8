/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sysfore.pos.accountingconfig;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.pos.forms.AppConfig;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Color;
import java.awt.Font;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author raghevendra
 */
public class ExportDetails extends javax.swing.JPanel implements JPanelView,BeanFactoryApp
{

    /**
     * Creates new form ExportDetails
     */
    private static boolean changesmade;
    private String voucherType=null;
    private String vocherNO=null;
    private String accountingdate=null;
    private String vDate=null;
    private String accountsDate=null;
    private String basicDateTime=null;
    private ExportOperation exportOP;
   private String propremoteId;
   private String path;
    private String propvchKey;
    public ExportDetails() {
        initComponents();
    }
    public void init(AppView app) throws BeanFactoryException{
        exportOP=(ExportOperation)app.getBean("com.sysfore.pos.accountingconfig.ExportOperation");
        populateVoucherType();
    
    }
        private String getTodaysDate(Date date)
        {

        String strDate = "";
        if (date != null) {
            java.text.Format format = new SimpleDateFormat("dd-MM-yyyy HH:mm");
            strDate = format.format(date);

        }
        return strDate;
        }
        
        
        private static String getDateBaseDate(Date date) {

        String strDate = "";
        if (date != null) {
            java.text.Format format = new SimpleDateFormat("yyyy-MM-dd");
            strDate = format.format(date);

        }
        return strDate;
     }
//       

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public static void setChangesmade(boolean changesmade) {
        ExportDetails.changesmade = changesmade;
    }
    
    
     private String getTrimFormatted(String date) {
        String retVal = "";
        String[] str = date.split("-");
        for (int i = str.length; i > 0; i--) {
            retVal = retVal + str[i - 1] + "-";
        }
        return retVal.substring(0, retVal.length() - 1);
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jVoucherNO = new javax.swing.JTextField();
        m_jbtnpodate2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jVocherDate = new javax.swing.JTextField();
        m_jbtnpodate4 = new javax.swing.JButton();
        jAccountingDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonExport = new javax.swing.JButton();
        jComboBoxVoucherType = new javax.swing.JComboBox();
        jVoucherType = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextComments = new javax.swing.JTextArea();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Button.disabledForeground")));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Voucher No.*");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 40, 100, 20));

        jVoucherNO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jVoucherNOActionPerformed(evt);
            }
        });
        jPanel1.add(jVoucherNO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 130, -1));

        m_jbtnpodate2.setBackground(new java.awt.Color(255, 255, 255));
        m_jbtnpodate2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        m_jbtnpodate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jbtnpodate2ActionPerformed(evt);
            }
        });
        jPanel1.add(m_jbtnpodate2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 30, 20));

        jLabel4.setText("Voucher Date*");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, -1, 20));

        jVocherDate.setEditable(false);
        jPanel1.add(jVocherDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 130, -1));

        m_jbtnpodate4.setBackground(new java.awt.Color(255, 255, 255));
        m_jbtnpodate4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        m_jbtnpodate4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jbtnpodate4ActionPerformed(evt);
            }
        });
        jPanel1.add(m_jbtnpodate4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 30, 20));

        jAccountingDate.setEditable(false);
        jPanel1.add(jAccountingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 130, -1));

        jLabel1.setText("Accounting Date*");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, 20));

        jButtonExport.setBackground(new java.awt.Color(255, 255, 255));
        jButtonExport.setText("Export");
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonExport, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, 80, 30));

        jComboBoxVoucherType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        jComboBoxVoucherType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVoucherTypeActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxVoucherType, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 130, -1));

        jVoucherType.setText("VoucherType * ");
        jPanel1.add(jVoucherType, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 110, -1));

        jLabel2.setText("Narration/Comments");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 160, -1));

        jTextComments.setColumns(20);
        jTextComments.setRows(5);
        jScrollPane1.setViewportView(jTextComments);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(255, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void m_jbtnpodate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jbtnpodate2ActionPerformed
        // TODO add your handling code here:
        Date date = JCalendarDialog.showCalendarTime(this, new Date());
        //jDeliveryDate.setText(getTodaysDate(date));
        jAccountingDate.setText(getTodaysDate(date));
        setChangesmade(true);
    }//GEN-LAST:event_m_jbtnpodate2ActionPerformed
 private void showMsgRed(ExportDetails aThis,String msg) {
        JOptionPane.showMessageDialog(aThis,getLabelRedPanel(msg),"Message",
                JOptionPane.INFORMATION_MESSAGE);
    }
 private void showMessageGreen(ExportDetails aThis,String msg) {
     //   JOptionPane.showMessageDialog(aThis, msg);
        JOptionPane.showMessageDialog(aThis,getLabelGreenPanel(msg), "Message",
                                        JOptionPane.INFORMATION_MESSAGE);
 }
 private JPanel getLabelGreenPanel(String msg) {
    JPanel panel = new JPanel();
    Font font = new Font("Verdana", Font.BOLD, 12);
    panel.setFont(font);
    panel.setOpaque(true);
  //  panel.setBackground(Color.BLUE);
    JLabel helloLabel = new JLabel(msg, JLabel.LEFT);
    helloLabel.setForeground(Color.decode("#206e10"));
     helloLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    panel.add(helloLabel);

    return panel;
}
 
  private JPanel getLabelRedPanel(String msg) {
    JPanel panel = new JPanel();
    Font font = new Font("Verdana", Font.BOLD, 12);
    panel.setFont(font);
    panel.setOpaque(true);
  //  panel.setBackground(Color.BLUE);
    JLabel helloLabel = new JLabel(msg, JLabel.LEFT);
    helloLabel.setForeground(Color.red);
    helloLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    panel.add(helloLabel);

    return panel;
}
 private int checkAccountingValues(List<AccountingPojo> accountDetails)
 {
      int status=1;
   for(AccountingPojo acc:accountDetails) 
   {
       if(!acc.getCardDebit().equals("")&&!acc.getCashDebit().equals("")&&!acc.getChequeDebit().equals("")&&!acc.getSalesCredit().equals("")&&!acc.getNonTaxCredit().equals("")&&!acc.getServiceTaxCredit().equals("")&&!acc.getDiscountDebit().equals("")&&!acc.getRoundOff().equals(""))
       {
           
           status=0;
       }
    }
   return status;
 }
    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        // TODO add your handling code here:
       // ExportPojo epojo1=new  ExportPojo();
         List<TallyPojo> voucherDetails = null;
       Double expenseAmount=null; 
       Double expenseAmountIssue=null; 
       Double expenseAmountReturn=null; 
       Double nonTaxVal=null;
       Double taxVal=null;
       Double totalTaxVal=0.0;
       String txString=null;
        java.util.List<ExportPojo> tx=null;
       Double tax=null;
       Double roundOff=null;
       Double roundAmount=null;
       Double serviceTax=null;
       Double discount=null;
       Double credit=null;
        java.util.List<ExportValPojo> ls=null;
        String vocherType=jComboBoxVoucherType.getSelectedItem().toString();
        String vocherNO=jVoucherNO.getText().toString();
        String narration=jTextComments.getText().toString();
        Voucher v=new Voucher();
        Double lineDiscount;
          if(vocherType.equals(""))
        {
          showMsgRed(this,"Please Select the Voucher Type" );
        }
          else if(vocherNO.equals("")||vocherNO.equals(""))
        {
           showMsgRed(this,"Please Enter Voucher NO.");
        }
       else if(jAccountingDate.getText().toString().equals(""))
               {
                 showMsgRed(this,"Please Enter The The Accounting Date" );  
               }
        else if(jVocherDate.getText().toString().equals(""))
               {
                 showMsgRed(this,"Please Enter The The Voucher Date" );  
               }
        else{
             try {
                 //from property file
                 String args[]=null;
                 AppConfig config = new AppConfig(args);
                  config.load();
                propremoteId =config.getProperty("tally.remoteid");
                path=config.getProperty("tally.path");
                System.out.println("property path:"+path);
                v.setPath(path);
                v.setVoucherNo(vocherNO);
                v.setVoucherType(vocherType);
                v.setNarration(narration);
                v.setRemoteIDwithoutExtention(propremoteId );
                 propvchKey=config.getProperty("tally.voucherkey");
                 voucherDetails=exportOP.getTallyParameters();
                 //Values from database
                int dbremoteid=voucherDetails.get(0).getRemoteid();
               int dbvchid  = voucherDetails.get(0).getVchkey();
               String dbvoucher= voucherDetails.get(0).getVoucherkey();
               v.setJournalKey(dbvoucher);
               Long voucherInt=Long.parseLong(dbvoucher);
                voucherInt=voucherInt+1;
                String updateVoucher=Long.toString(voucherInt);
                String remoteval= Integer.toString(dbremoteid);
                v.setGuid(remoteval);
                int vchrLength=remoteval.length();
     //appending 0's to remoteid
     for(int i=0;i<(8-vchrLength);i++)
        {
            remoteval="0"+remoteval;
        }
                propremoteId= propremoteId+"-"+remoteval;
                v.setVoucherRemoteID(propremoteId);
                dbremoteid=dbremoteid+1;
                String vchval= Integer.toString(dbvchid);
                int appendedLength=vchval.length();  
     for(int i=0;i<(8-appendedLength);i++)
        {
            vchval="0"+vchval;
            
        }  
   propvchKey=propvchKey+":"+vchval;     
        v.setVchKey(propvchKey);
         dbvchid=dbvchid+1;
         //updating incremented values back to database
         exportOP.updateVoucher(dbremoteid, dbvchid,updateVoucher);
         System.out.println("Remote ID " + dbremoteid);
         
        } catch (BasicException ex) {
          
        }
        String acctingDate=jVocherDate.getText();
        if(!acctingDate.equals(""))
        {
         String date=acctingDate.substring(0, 10);
         vDate=getTrimFormatted(date);
        }       
        
       String acctDate=jAccountingDate.getText(); 
       if(!acctDate.equals(""))  
        {   
      String actDate=acctDate.substring(0, 10);
       accountsDate=getTrimFormatted(actDate);
       SimpleDateFormat ft = 
      new SimpleDateFormat ("yyyy-MM-dd");
               try {
                   Date date = ft.parse(accountsDate);
                   ft.applyPattern("yyyyMMdd");
                 accountsDate= ft.format(date); 
                 ft.applyPattern("dd-MMM-yyyy 'at' hh:mm");
                 basicDateTime= ft.format(date);
                 
                } catch (ParseException ex) {
                   Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
               }
      v.setAccountDate(accountsDate);
      v.setEffectiveDate(basicDateTime);
       }        
//         
//        
       
        String incDate=vDate;
        Calendar cal = Calendar.getInstance();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
        Date incrementDate=null;
        try {
             incrementDate = df.parse(incDate);
             cal.setTime(incrementDate);
             cal.add(Calendar.DAY_OF_MONTH, 1);
             incrementDate = cal.getTime();
        } catch (ParseException ex) {
            Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
        }

	
        Map<String,Double> myMap=null;
        Map<String,Double> myMapCharge=null;
        String vochuerDate=getDateBaseDate(incrementDate);
        List<AccountingPojo> accountDetails = null;
        List<ExportPojo> elist = null;
        List<ExportPojo> esTax = null;
        List<ExportPojo> esCharge = null;
        List<ExportPojo> chargeslist = null;
        List<ExportPojo> chargediscountlist=null;
        List<ExportPojo>cuslist=null;
        ExportPojo epojo6=new  ExportPojo();
             if(vocherType.equals("Journal"))
        {
               try {
                    accountDetails = exportOP.getAccountingValues();
                    if(accountDetails.size()==0||accountDetails.get(0).getJourDebit().equals("")||accountDetails.get(0).getJourCrebit().equals(""))
                        {
                    showMsgRed(this,"Please set default accounting configuration journal values" ); 
                     }
                    else{
                   expenseAmountIssue=exportOP.getExpensesIssue(vDate,vochuerDate);
                   expenseAmountReturn=exportOP.getExpensesReturn(vDate,vochuerDate);
                   expenseAmount= expenseAmountIssue- expenseAmountReturn;
                   ExpenseVoucherPrint.printJournal(v, expenseAmount,accountDetails);
                   showMessageGreen(this,"Exported Succesfully"); 
               } 
               }catch (BasicException ex) {
                   Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
               }
        
        }
        // FOR SALES
      else if(vocherType.equals("Sales"))
        {
        try {
      
           nonTaxVal= exportOP.getNonTaxSum(vDate,vochuerDate);
           taxVal= exportOP.getTaxSum(vDate,vochuerDate);
            ls=exportOP.getPayment(vDate,vochuerDate);
         //Service Tax newly added
         esTax=exportOP.getServiceTax(vDate,vochuerDate);
        //Service Charge newly addded
         esCharge=exportOP.getServiceCharge(vDate,vochuerDate);
         tax= exportOP.getTax(vDate,vochuerDate);
         roundAmount=exportOP.getRoundOffAmt(vDate,vochuerDate);
         discount=exportOP.getDiscount(vDate,vochuerDate);      
         credit=exportOP.getCreditAmount(vDate,vochuerDate);
      
         //  ArrayList<ExportPojo> elist=exportOP.getAmount(vDate,vochuerDate);
            elist=exportOP.getAmount(vDate,vochuerDate);
            cuslist=exportOP.getAmount(vDate,vochuerDate);
            
          
           accountDetails = exportOP.getAccountingValues();
            if(accountDetails.size()==0)
            {
               showMsgRed(this,"Please set all the default accounting configuration" ); 
            }
            else {
          int val=checkAccountingValues(accountDetails);
        if(val==1)
          { 
            showMsgRed(this,"Please set all the default accounting configuration" );
          }
        else if(elist.size()==0)
             showMsgRed(this,"NO RECORDS ON THIS DATE");
           else{
          
              //service tax  
             for(int i=0;i<esTax.size();i++)
         {
             String prTax=accountDetails.get(0).getServiceTaxCredit();
             System.out.println("esTax.get(i).getPaymentName()"+esTax.get(i).getPaymentName());
            if(esTax.get(i).getPaymentName().equals("")||esTax.get(i).getPaymentName().equals(prTax)) 
            {
                System.out.println("inside if"+tax);
               tax=tax+esTax.get(i).getAmt();
            }
         }
        
          myMap = new HashMap<String,Double>();
            
         for(int i=0;i<esTax.size();i++)
         {
            myMap.put(esTax.get(i).getPaymentName(),esTax.get(i).getAmt());
         }
         
         //Service Charge
          myMapCharge= new HashMap<String,Double>();
          for(int i=0;i<esCharge.size();i++)
          {
            myMapCharge.put(esCharge.get(i).getPaymentName(),esCharge.get(i).getAmt());
          }
          
          
          ExportPojo epojo1=new  ExportPojo();
            epojo1.setAmt(nonTaxVal);
            epojo1.setPaymentName("nontax sum");
            elist.add(epojo1);
            ExportPojo epojo2=new  ExportPojo();
            epojo2.setAmt(taxVal);
            epojo2.setPaymentName("tax sum");
            elist.add(epojo2);
            ExportPojo epojo3=new  ExportPojo();
            System.out.println(tax+"=tax");
            epojo3.setAmt(tax);
            epojo3.setPaymentName("total tax");
             elist.add(epojo3);
             ExportPojo epojo4=new  ExportPojo();
             epojo4.setAmt(discount);
             epojo4.setPaymentName("discount sum");
             elist.add(epojo4);
             ExportPojo epojo5=new  ExportPojo();
            epojo5.setAmt(credit);
             epojo5.setPaymentName("credit sum");
             elist.add(epojo5);
             epojo6=new  ExportPojo();
             epojo6.setAmt(roundAmount);
             epojo6.setPaymentName("Round Amount");
             elist.add(epojo6);
        
             BigDecimal tot=null;
             Double tot1=0.0;
            Iterator alist=elist.iterator();
            for(int j=0; j<elist.size(); j++)
            {           
                 tot1+=elist.get(j).getAmt();
                
            }
             tot=tot.valueOf(tot1);
             v.setVoucherNo(vocherNO);       
         VoucherPrint.printJournal(v,elist,accountDetails,myMap,myMapCharge);
         showMessageGreen(this,"Exported Succesfully"); 
             }
            }
        }catch (BasicException ex) {
            Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }
      //for purchase
      else if(vocherType.equals("Purchase"))
      {
               try {
                  elist=exportOP.getPurchaseAmount(vDate,vochuerDate) ;
                   accountDetails = exportOP.getAccountingValues();
                    if(accountDetails.size()==0||accountDetails.get(0).getCusDebit().equals("")||accountDetails.get(0).getPurDebit().equals("")||accountDetails.get(0).getPurchaseNonTax().equals("")||accountDetails.get(0).getPurchaseDiscount().equals("")||accountDetails.get(0).getRoundOff().equals(""))
                        {
                            showMsgRed(this,"Please set all the default accounting configuration");
                        }
                    else if(elist.size()==0)
                             showMsgRed(this,"NO RECORDS ON THIS DATE");
                    else{
                   chargeslist=exportOP.getPurchaseCharges(vDate,vochuerDate);
                   lineDiscount=exportOP.getLineDiscount(vDate,vochuerDate);
                   chargediscountlist=exportOP.getPurchaseDiscount(vDate, vochuerDate);
                   nonTaxVal=exportOP.getNonTaxPurchaseSum(vDate,vochuerDate);
                   taxVal=exportOP.getTaxPurchaseSum(vDate, vochuerDate);
                   tx=exportOP.getPurchaseTaxes(vDate, vochuerDate);
                   roundOff=exportOP.getRoundAmtSum(vDate, vochuerDate);
                    for(ExportPojo dis:tx)
                    {
                      
                    txString=dis.getPaymentName();
                    System.out.println(txString+"txString");
                   totalTaxVal= totalTaxVal+Double.parseDouble(txString.substring(3));
                    }
                  // discount=exportOP.getPurchaseDiscount(vDate, vochuerDate);
                   ExportPojo epojo1=new  ExportPojo();
                   epojo1.setAmt(nonTaxVal);
                   epojo1.setPaymentName("nontax sum");
                   elist.add(epojo1);
                   ExportPojo epojo2=new  ExportPojo();
                   taxVal=taxVal+totalTaxVal;
                   epojo2.setAmt(taxVal);
                   epojo2.setPaymentName("tax sum");
                   elist.add(epojo2);
                   ExportPojo epojo3=new  ExportPojo();
                   epojo3.setAmt(lineDiscount);
                   epojo3.setPaymentName("line discount");
                   elist.add(epojo3);
                   ExportPojo epojo4=new  ExportPojo();
                   epojo4.setAmt(roundOff);
                   epojo4.setPaymentName("roundOff amount");
                   elist.add(epojo4);
                   System.out.println("roundOff"+roundOff);
                   v.setVoucherNo(vocherNO);
                   PurchaseVoucherPrint.printJournal(v,elist,accountDetails, chargeslist,chargediscountlist);
                  showMessageGreen(this,"Exported Succesfully");
                    }
               }catch (BasicException ex) {
                   Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
               }

      }

      //for Credit SALE  
       else{
           try {
            // TODO add your handling code here:
           nonTaxVal= exportOP.getNonTaxCreditSum(vDate,vochuerDate);
           taxVal= exportOP.getTaxCreditSum(vDate,vochuerDate);
           tax= exportOP.getCreditTax(vDate,vochuerDate);
        } catch (BasicException ex) {
            Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        try {
            elist=exportOP.getCreditSaleAmount(vDate,vochuerDate);
            cuslist=exportOP.getCreditSaleAmount(vDate,vochuerDate);
            ExportPojo cusAccount=new ExportPojo();
           for(ExportPojo dis:cuslist)
           {
              cusAccount.setPaymentName(dis.getPaymentName()); 
              cusAccount.setAmt(dis.getAmt());
           }
           cuslist.add(cusAccount);
            accountDetails = exportOP.getAccountingValues();
          if(accountDetails.size()==0||accountDetails.get(0).getSalesCredit().equals("") || accountDetails.get(0).getNonTaxCredit().equals("")|| accountDetails.get(0).getServiceTaxCredit().equals("") || accountDetails.get(0).getVenDebit().equals("") )
          { 
            showMsgRed(this,"Please set all the default accounting configuration" );
          }
       else if(elist.size()==0)
           showMsgRed(this,"NO RECORDS ON THIS DATE");
           else{
            ExportPojo epojo1=new  ExportPojo();
            epojo1.setAmt(nonTaxVal);
            epojo1.setPaymentName("nontax credit sum");
            elist.add(epojo1);
            ExportPojo epojo2=new  ExportPojo();
            epojo2.setAmt(taxVal);
            epojo2.setPaymentName("tax credit sum");
            elist.add(epojo2);
            ExportPojo epojo3=new  ExportPojo();
            epojo3.setAmt(tax);
            epojo3.setPaymentName("total credit tax");
            elist.add(epojo3);
            ExportPojo epojo4=new  ExportPojo();
            v.setVoucherNo(vocherNO);
            VoucherCreditSalePrint.printJournal(v,elist,accountDetails,cuslist);
            showMessageGreen(this,"Exported Succesfully");
        }
           } catch (BasicException ex) {
            Logger.getLogger(ExportDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
         jVoucherNO.setText(null);
         jComboBoxVoucherType.setSelectedItem("");
         jTextComments.setText(null);

         }
    
    }//GEN-LAST:event_jButtonExportActionPerformed
 public void populateVoucherType()
 {      
        jVoucherNO.setText(null);
        jComboBoxVoucherType.removeAllItems();
        jComboBoxVoucherType.addItem("");
        ArrayList list=new ArrayList();
        list.add("Sales");
        list.add("Credit Sales");
        list.add("Purchase");
        list.add("Journal");
        for(int i=0; i<list.size(); i++)
        jComboBoxVoucherType.addItem(list.get(i));
       
 }
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String dateNew=sdf.format(date);
  
    private void jComboBoxVoucherTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxVoucherTypeActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_jComboBoxVoucherTypeActionPerformed

    private void m_jbtnpodate4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jbtnpodate4ActionPerformed
        // TODO add your handling code here:
        Date date = JCalendarDialog.showCalendarTime(this, new Date());

        jVocherDate.setText(getTodaysDate(date));
        setChangesmade(true);
    }//GEN-LAST:event_m_jbtnpodate4ActionPerformed

    private void jVoucherNOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVoucherNOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jVoucherNOActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAccountingDate;
    private javax.swing.JButton jButtonExport;
    private javax.swing.JComboBox jComboBoxVoucherType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextComments;
    private javax.swing.JTextField jVocherDate;
    private javax.swing.JTextField jVoucherNO;
    private javax.swing.JLabel jVoucherType;
    private javax.swing.JButton m_jbtnpodate2;
    private javax.swing.JButton m_jbtnpodate4;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return AppLocal.getIntString("Menu.Export");
    }

    @Override
    public void activate() throws BasicException {
       populateVoucherType();
         Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String dateNew=sdf.format(date);
        jVocherDate.setText(dateNew);
        jAccountingDate.setText(dateNew);
    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public Object getBean() {
         return this;
    }
}
